------- FILE c:\Users\zmuno\OneDrive\Documentos\Documentos Personales\LaSalle\GAD100 - History of Games\atari-hat-game\hatgame.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE c:\Users\zmuno\OneDrive\Documentos\Documentos Personales\LaSalle\GAD100 - History of Games\atari-hat-game\hatgame.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE c:\Users\zmuno\OneDrive\Documentos\Documentos Personales\LaSalle\GAD100 - History of Games\atari-hat-game\hatgame.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 d4	    _Frame_Counter =	a
      4  10000 ????
      5  10000 ????		00 a0	    SCREEN_WIDTH =	160
      6  10000 ????
      7  10000 ????		00 c0	    SCREEN_HEIGHT =	192
      8  10000 ????
      9  10000 ????		00 00	    TAN_DARK   =	EA
     10  10000 ????
     11  10000 ????		00 ec	    TAN        =	$EC
     12  10000 ????
     13  10000 ????		00 78	    BLUE_DARK  =	$78
     14  10000 ????
     15  10000 ????		00 7a	    BLUE       =	$7A
     16  10000 ????
     17  10000 ????		00 ae	    BLUE_LIGHT =	$AE
     18  10000 ????
     19  10000 ????		00 04	    GRAY       =	$04
     20  10000 ????
     21  10000 ????		00 08	    GRAY_LIGHT =	$08
     22  10000 ????
     23  10000 ????		00 34	    RED        =	$34
     24  10000 ????
     25  10000 ????		00 36	    RED_LIGHT  =	$36
     26  10000 ????
     27  10000 ????		00 1e	    YELLOW     =	$1E
     28  10000 ????
     29  10000 ????		00 0e	    WHITE      =	$0E
     30  10000 ????
     31  10000 ????		00 01	    PFcolors   =	1
     32  10000 ????		00 01	    player1colors =	1
     33  10000 ????		00 01	    player1colors =	1
     34  10000 ????		00 01	    playercolors =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE c:\Users\zmuno\OneDrive\Documentos\Documentos Personales\LaSalle\GAD100 - History of Games\atari-hat-game\hatgame.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 d4	    _Frame_Counter =	a
      4  10000 ????
      5  10000 ????		00 a0	    SCREEN_WIDTH =	160
      6  10000 ????
      7  10000 ????		00 c0	    SCREEN_HEIGHT =	192
      8  10000 ????
      9  10000 ????		00 00	    TAN_DARK   =	EA
     10  10000 ????
     11  10000 ????		00 ec	    TAN        =	$EC
     12  10000 ????
     13  10000 ????		00 78	    BLUE_DARK  =	$78
     14  10000 ????
     15  10000 ????		00 7a	    BLUE       =	$7A
     16  10000 ????
     17  10000 ????		00 ae	    BLUE_LIGHT =	$AE
     18  10000 ????
     19  10000 ????		00 04	    GRAY       =	$04
     20  10000 ????
     21  10000 ????		00 08	    GRAY_LIGHT =	$08
     22  10000 ????
     23  10000 ????		00 34	    RED        =	$34
     24  10000 ????
     25  10000 ????		00 36	    RED_LIGHT  =	$36
     26  10000 ????
     27  10000 ????		00 1e	    YELLOW     =	$1E
     28  10000 ????
     29  10000 ????		00 0e	    WHITE      =	$0E
     30  10000 ????
     31  10000 ????		00 01	    PFcolors   =	1
     32  10000 ????		00 01	    player1colors =	1
     33  10000 ????		00 01	    player1colors =	1
     34  10000 ????		00 01	    playercolors =	1
------- FILE c:\Users\zmuno\OneDrive\Documentos\Documentos Personales\LaSalle\GAD100 - History of Games\atari-hat-game\hatgame.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 5a f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d7 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4				  -	      ifnconst	player1colors
    233  f0b4				  -	      lda	missile1height	;3
    234  f0b4				  -	      dcp	missile1y	;5
    235  f0b4				  -	      rol		;2
    236  f0b4				  -	      rol		;2
    237  f0b4				  -	      sta	ENAM1	;3
    238  f0b4					      else
    239  f0b4		       b1 87		      lda	(player1color),y
    240  f0b6		       85 07		      sta	COLUP1
    241  f0b8				  -	      ifnconst	playercolors
    242  f0b8				  -	      sleep	7
    243  f0b8					      else
    244  f0b8		       ad 82 00 	      lda.w	player0colorstore
    245  f0bb		       85 06		      sta	COLUP0
    246  f0bd					      endif
    247  f0bd					      endif
    248  f0bd
    249  f0bd				  -	      ifconst	pfres
    250  f0bd				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bd				  -	      sta	PF1L	;3
    252  f0bd				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bd				  -	      sta	PF2L	;3
    254  f0bd				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bd				  -	      sta	PF1R	; 3 too early?
    256  f0bd				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bd				  -	      sta	PF2R	;3
    258  f0bd					      else
    259  f0bd		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0bf		       85 0e		      sta	PF1L	;3
    261  f0c1		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c3		       85 0f		      sta	PF2L	;3
    263  f0c5		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c7		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c9		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0cb		       85 0f		      sta	PF2R	;3
    267  f0cd					      endif
    268  f0cd							; sleep 3
    269  f0cd
    270  f0cd		       a5 8e		      lda	player0height
    271  f0cf		       c7 85		      dcp	player0y
    272  f0d1		       90 b0		      bcc	.skipDrawP0
    273  f0d3		       a4 85		      ldy	player0y
    274  f0d5		       b1 8a		      lda	(player0pointer),y
    275  f0d7				   .continueP0
    276  f0d7		       85 1b		      sta	GRP0
    277  f0d9
    278  f0d9					      ifnconst	no_blank_lines
    279  f0d9				  -	      ifnconst	playercolors
    280  f0d9				  -	      lda	missile0height	;3
    281  f0d9				  -	      dcp	missile0y	;5
    282  f0d9				  -	      sbc	stack1
    283  f0d9				  -	      sta	ENAM0	;3
    284  f0d9					      else
    285  f0d9		       b1 90		      lda	(player0color),y
    286  f0db		       85 82		      sta	player0colorstore
      0  f0dd					      sleep	6
      1  f0dd				   .CYCLES    SET	6
      2  f0dd
      3  f0dd				  -	      IF	.CYCLES < 2
      4  f0dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0dd				  -	      ERR
      6  f0dd					      ENDIF
      7  f0dd
      8  f0dd				  -	      IF	.CYCLES & 1
      9  f0dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0dd				  -	      nop	0
     11  f0dd				  -	      ELSE
     12  f0dd				  -	      bit	VSYNC
     13  f0dd				  -	      ENDIF
     14  f0dd				  -.CYCLES    SET	.CYCLES - 3
     15  f0dd					      ENDIF
     16  f0dd
     17  f0dd					      REPEAT	.CYCLES / 2
     18  f0dd		       ea		      nop
     17  f0dd					      REPEND
     18  f0de		       ea		      nop
     17  f0de					      REPEND
     18  f0df		       ea		      nop
     19  f0e0					      REPEND
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef					      ifconst	PFcolors
    403  f0ef		       a8		      tay
    404  f0f0		       b1 f0		      lda	(pfcolortable),y
    405  f0f2					      ifnconst	backgroundchange
    406  f0f2		       85 08		      sta	COLUPF
    407  f0f4				  -	      else
    408  f0f4				  -	      sta	COLUBK
    409  f0f4					      endif
    410  f0f4				  -	      ifconst	pfrowheight
    411  f0f4				  -	      lda	#pfrowheight
    412  f0f4					      else
    413  f0f4					      ifnconst	pfres
    414  f0f4		       a9 08		      lda	#8
    415  f0f6				  -	      else
    416  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0f6					      endif
    418  f0f6					      endif
    419  f0f6		       85 9c		      sta	temp1
    420  f0f8					      endif
    421  f0f8					      ifnconst	PFcolorandheight
    422  f0f8				  -	      ifnconst	PFcolors
    423  f0f8				  -	      ifnconst	PFheights
    424  f0f8				  -	      ifnconst	no_blank_lines
    425  f0f8				  -			; read paddle 0
    426  f0f8				  -			; lo-res paddle read
    427  f0f8				  -			; bit INPT0
    428  f0f8				  -			; bmi paddleskipread
    429  f0f8				  -			; inc paddle0
    430  f0f8				  -			;donepaddleskip
    431  f0f8				  -	      sleep	10
    432  f0f8				  -	      ifconst	pfrowheight
    433  f0f8				  -	      lda	#pfrowheight
    434  f0f8				  -	      else
    435  f0f8				  -	      ifnconst	pfres
    436  f0f8				  -	      lda	#8
    437  f0f8				  -	      else
    438  f0f8				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f8				  -	      endif
    440  f0f8				  -	      endif
    441  f0f8				  -	      sta	temp1
    442  f0f8				  -	      endif
    443  f0f8				  -	      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101				  -	      ifnconst	PFcolors
    459  f101				  -	      sleep	10
    460  f101					      else
    461  f101		       a0 7c		      ldy	#124
    462  f103		       b1 f0		      lda	(pfcolortable),y
    463  f105		       85 08		      sta	COLUPF
    464  f107					      endif
    465  f107
    466  f107				  -	      ifconst	PFheights
    467  f107				  -	      ldx	#1
    468  f107				  -			;sleep 4
    469  f107				  -	      sleep	3	; this was over 1 cycle
    470  f107					      else
    471  f107		       a6 ef		      ldx	playfieldpos
    472  f109							;sleep 3
      0  f109					      sleep	2	; this was over 1 cycle
      1  f109				   .CYCLES    SET	2
      2  f109
      3  f109				  -	      IF	.CYCLES < 2
      4  f109				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f109				  -	      ERR
      6  f109					      ENDIF
      7  f109
      8  f109				  -	      IF	.CYCLES & 1
      9  f109				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f109				  -	      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109				  -	      ENDIF
     14  f109				  -.CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109					      REPEAT	.CYCLES / 2
     18  f109		       ea		      nop
     19  f10a					      REPEND
    474  f10a					      endif
    475  f10a
    476  f10a		       4c 28 f1 	      jmp	enterlastkernel
    477  f10d
    478  f10d				  -	      else
    479  f10d				  -lastkernelline
    480  f10d				  -
    481  f10d				  -	      ifconst	PFheights
    482  f10d				  -	      ldx	#1
    483  f10d				  -			;sleep 5
    484  f10d				  -	      sleep	4	; this was over 1 cycle
    485  f10d				  -	      else
    486  f10d				  -	      ldx	playfieldpos
    487  f10d				  -			;sleep 4
    488  f10d				  -	      sleep	3	; this was over 1 cycle
    489  f10d				  -	      endif
    490  f10d				  -
    491  f10d				  -	      cpx	#0
    492  f10d				  -	      bne	.enterfromNBL
    493  f10d				  -	      jmp	no_blank_lines_bailout
    494  f10d					      endif
    495  f10d
    496  f10d				  -	      if	((<*)>$d5)
    497  f10d				  -	      align	256
    498  f10d					      endif
    499  f10d							; this is a kludge to prevent page wrapping - fix!!!
    500  f10d
    501  f10d				   .skipDrawlastP1
    502  f10d		       a9 00		      lda	#0
    503  f10f		       a8		      tay		; added so we don't cross a page
    504  f110		       4c 3a f1 	      jmp	.continuelastP1
    505  f113
    506  f113				   .endkerloop		; enter at cycle 59??
    507  f113
    508  f113		       ea		      nop
    509  f114
    510  f114				   .enterfromNBL
    511  f114				  -	      ifconst	pfres
    512  f114				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f114				  -	      sty	PF1L	;3
    514  f114				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f114				  -	      sty	PF2L	;3
    516  f114				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f114				  -	      sty	PF1R	; possibly too early?
    518  f114				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f114				  -	      sty	PF2R	;3
    520  f114					      else
    521  f114		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f117		       84 0e		      sty	PF1L	;3
    523  f119		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11c		       84 0f		      sty	PF2L	;3
    525  f11e		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f121		       84 0e		      sty	PF1R	; possibly too early?
    527  f123		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f126		       84 0f		      sty	PF2R	;3
    529  f128					      endif
    530  f128
    531  f128				   enterlastkernel
    532  f128		       a5 92		      lda	ballheight
    533  f12a
    534  f12a							; tya
    535  f12a		       c7 89		      dcp	bally
    536  f12c							; sleep 4
    537  f12c
    538  f12c							; sbc stack3
    539  f12c		       2a		      rol
    540  f12d		       2a		      rol
    541  f12e		       85 1f		      sta	ENABL
    542  f130
    543  f130		       a5 8f		      lda	player1height	;3
    544  f132		       c7 86		      dcp	player1y	;5
    545  f134		       90 d7		      bcc	.skipDrawlastP1
    546  f136		       a4 86		      ldy	player1y	;3
    547  f138		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13a							; so it doesn't cross a page boundary!
    549  f13a
    550  f13a				   .continuelastP1
    551  f13a		       85 1c		      sta	GRP1	;3
    552  f13c
    553  f13c				  -	      ifnconst	player1colors
    554  f13c				  -	      lda	missile1height	;3
    555  f13c				  -	      dcp	missile1y	;5
    556  f13c					      else
    557  f13c		       b1 87		      lda	(player1color),y
    558  f13e		       85 07		      sta	COLUP1
    559  f140					      endif
    560  f140
    561  f140		       ca		      dex
    562  f141							;dec temp4 ; might try putting this above PF writes
    563  f141		       f0 37		      beq	endkernel
    564  f143
    565  f143
    566  f143				  -	      ifconst	pfres
    567  f143				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f143				  -	      sty	PF1L	;3
    569  f143				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f143				  -	      sty	PF2L	;3
    571  f143				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f143				  -	      sty	PF1R	; possibly too early?
    573  f143				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f143				  -	      sty	PF2R	;3
    575  f143					      else
    576  f143		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f146		       84 0e		      sty	PF1L	;3
    578  f148		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14b		       84 0f		      sty	PF2L	;3
    580  f14d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f150		       84 0e		      sty	PF1R	; possibly too early?
    582  f152		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f155		       84 0f		      sty	PF2R	;3
    584  f157					      endif
    585  f157
    586  f157				  -	      ifnconst	player1colors
    587  f157				  -	      rol		;2
    588  f157				  -	      rol		;2
    589  f157				  -	      sta	ENAM1	;3
    590  f157					      else
    591  f157				  -	      ifnconst	playercolors
    592  f157				  -	      sleep	7
    593  f157					      else
    594  f157		       ad 82 00 	      lda.w	player0colorstore
    595  f15a		       85 06		      sta	COLUP0
    596  f15c					      endif
    597  f15c					      endif
    598  f15c
    599  f15c		       ad 8e 00 	      lda.w	player0height
    600  f15f		       c7 85		      dcp	player0y
    601  f161		       90 11		      bcc	.skipDrawlastP0
    602  f163		       a4 85		      ldy	player0y
    603  f165		       b1 8a		      lda	(player0pointer),y
    604  f167				   .continuelastP0
    605  f167		       85 1b		      sta	GRP0
    606  f169
    607  f169
    608  f169
    609  f169					      ifnconst	no_blank_lines
    610  f169		       a5 90		      lda	missile0height	;3
    611  f16b		       c7 91		      dcp	missile0y	;5
    612  f16d		       e5 f6		      sbc	stack1
    613  f16f		       85 1d		      sta	ENAM0	;3
    614  f171		       4c 13 f1 	      jmp	.endkerloop
    615  f174				  -	      else
    616  f174				  -	      ifconst	readpaddle
    617  f174				  -	      ldy	currentpaddle
    618  f174				  -	      lda	INPT0,y
    619  f174				  -	      bpl	noreadpaddle2
    620  f174				  -	      inc	paddle
    621  f174				  -	      jmp	.endkerloop
    622  f174				  -noreadpaddle2
    623  f174				  -	      sleep	4
    624  f174				  -	      jmp	.endkerloop
    625  f174				  -	      else		; no_blank_lines and no paddle reading
    626  f174				  -	      pla
    627  f174				  -	      pha		; 14 cycles in 4 bytes
    628  f174				  -	      pla
    629  f174				  -	      pha
    630  f174				  -			; sleep 14
    631  f174				  -	      jmp	.endkerloop
    632  f174				  -	      endif
    633  f174					      endif
    634  f174
    635  f174
    636  f174							; ifconst donepaddleskip
    637  f174							;paddleskipread
    638  f174							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f174							; plus we get a lo-res paddle read
    640  f174							; bmi donepaddleskip
    641  f174							; endif
    642  f174
    643  f174				   .skipDrawlastP0
    644  f174		       a9 00		      lda	#0
    645  f176		       a8		      tay
    646  f177		       4c 67 f1 	      jmp	.continuelastP0
    647  f17a
    648  f17a				  -	      ifconst	no_blank_lines
    649  f17a				  -no_blank_lines_bailout
    650  f17a				  -	      ldx	#0
    651  f17a					      endif
    652  f17a
    653  f17a				   endkernel
    654  f17a							; 6 digit score routine
    655  f17a		       86 0e		      stx	PF1
    656  f17c		       86 0f		      stx	PF2
    657  f17e		       86 0d		      stx	PF0
    658  f180		       18		      clc
    659  f181
    660  f181				  -	      ifconst	pfrowheight
    661  f181				  -	      lda	#pfrowheight+2
    662  f181					      else
    663  f181					      ifnconst	pfres
    664  f181		       a9 0a		      lda	#10
    665  f183				  -	      else
    666  f183				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f183					      endif
    668  f183					      endif
    669  f183
    670  f183		       e5 ef		      sbc	playfieldpos
    671  f185		       85 ef		      sta	playfieldpos
    672  f187		       8a		      txa
    673  f188
    674  f188				  -	      ifconst	shakescreen
    675  f188				  -	      bit	shakescreen
    676  f188				  -	      bmi	noshakescreen2
    677  f188				  -	      ldx	#$3D
    678  f188				  -noshakescreen2
    679  f188					      endif
    680  f188
    681  f188		       95 02		      sta	WSYNC,x
    682  f18a
    683  f18a							; STA WSYNC ;first one, need one more
    684  f18a		       85 0b		      sta	REFP0
    685  f18c		       85 0c		      sta	REFP1
    686  f18e		       85 1b		      STA	GRP0
    687  f190		       85 1c		      STA	GRP1
    688  f192							; STA PF1
    689  f192							; STA PF2
    690  f192		       85 2b		      sta	HMCLR
    691  f194		       85 1d		      sta	ENAM0
    692  f196		       85 1e		      sta	ENAM1
    693  f198		       85 1f		      sta	ENABL
    694  f19a
    695  f19a		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19c		       85 85		      sta	player0y
    697  f19e		       a5 9e		      lda	temp3
    698  f1a0		       85 86		      sta	player1y
    699  f1a2				  -	      ifnconst	player1colors
    700  f1a2				  -	      lda	temp6
    701  f1a2				  -	      sta	missile1y
    702  f1a2					      endif
    703  f1a2				  -	      ifnconst	playercolors
    704  f1a2				  -	      ifnconst	readpaddle
    705  f1a2				  -	      lda	temp5
    706  f1a2				  -	      sta	missile0y
    707  f1a2				  -	      endif
    708  f1a2					      endif
    709  f1a2		       a5 f7		      lda	stack2
    710  f1a4		       85 89		      sta	bally
    711  f1a6
    712  f1a6							; strangely, this isn't required any more. might have
    713  f1a6							; resulted from the no_blank_lines score bounce fix
    714  f1a6							;ifconst no_blank_lines
    715  f1a6							;sta WSYNC
    716  f1a6							;endif
    717  f1a6
    718  f1a6		       ad 84 02 	      lda	INTIM
    719  f1a9		       18		      clc
    720  f1aa					      ifnconst	vblank_time
    721  f1aa		       69 8e		      adc	#43+12+87
    722  f1ac				  -	      else
    723  f1ac				  -	      adc	#vblank_time+12+87
    724  f1ac				  -
    725  f1ac					      endif
    726  f1ac							; sta WSYNC
    727  f1ac		       8d 96 02 	      sta	TIM64T
    728  f1af
    729  f1af				  -	      ifconst	minikernel
    730  f1af				  -	      jsr	minikernel
    731  f1af					      endif
    732  f1af
    733  f1af							; now reassign temp vars for score pointers
    734  f1af
    735  f1af							; score pointers contain:
    736  f1af							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1af							; swap lo2->temp1
    738  f1af							; swap lo4->temp3
    739  f1af							; swap lo6->temp5
    740  f1af					      ifnconst	noscore
    741  f1af		       a5 97		      lda	scorepointers+1
    742  f1b1							; ldy temp1
    743  f1b1		       85 9c		      sta	temp1
    744  f1b3							; sty scorepointers+1
    745  f1b3
    746  f1b3		       a5 99		      lda	scorepointers+3
    747  f1b5							; ldy temp3
    748  f1b5		       85 9e		      sta	temp3
    749  f1b7							; sty scorepointers+3
    750  f1b7
    751  f1b7
    752  f1b7		       85 2b		      sta	HMCLR
    753  f1b9		       ba		      tsx
    754  f1ba		       86 f6		      stx	stack1
    755  f1bc		       a2 e0		      ldx	#$E0
    756  f1be		       86 20		      stx	HMP0
    757  f1c0
    758  f1c0		       a5 a3		      LDA	scorecolor
    759  f1c2		       85 06		      STA	COLUP0
    760  f1c4		       85 07		      STA	COLUP1
    761  f1c6				  -	      ifconst	scorefade
    762  f1c6				  -	      STA	stack2
    763  f1c6					      endif
    764  f1c6				  -	      ifconst	pfscore
    765  f1c6				  -	      lda	pfscorecolor
    766  f1c6				  -	      sta	COLUPF
    767  f1c6					      endif
    768  f1c6		       85 02		      sta	WSYNC
    769  f1c8		       a2 00		      ldx	#0
    770  f1ca		       86 1b		      STx	GRP0
    771  f1cc		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1ce
    773  f1ce		       a5 9b		      lda	scorepointers+5
    774  f1d0							; ldy temp5
    775  f1d0		       95 a0		      sta	temp5,x
    776  f1d2							; sty scorepointers+5
    777  f1d2		       a9 ff		      lda	#>scoretable
    778  f1d4		       85 97		      sta	scorepointers+1
    779  f1d6		       85 99		      sta	scorepointers+3
    780  f1d8		       85 9b		      sta	scorepointers+5
    781  f1da		       85 9d		      sta	temp2
    782  f1dc		       85 9f		      sta	temp4
    783  f1de		       85 a1		      sta	temp6
    784  f1e0		       a0 07		      LDY	#7
    785  f1e2		       84 25		      STY	VDELP0
    786  f1e4		       85 10		      STA	RESP0
    787  f1e6		       85 11		      STA	RESP1
    788  f1e8
    789  f1e8
    790  f1e8		       a9 03		      LDA	#$03
    791  f1ea		       85 04		      STA	NUSIZ0
    792  f1ec		       85 05		      STA	NUSIZ1
    793  f1ee		       85 26		      STA	VDELP1
    794  f1f0		       a9 f0		      LDA	#$F0
    795  f1f2		       85 21		      STA	HMP1
    796  f1f4		       b1 96		      lda	(scorepointers),y
    797  f1f6		       85 1b		      sta	GRP0
    798  f1f8		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f1fa		       4c 08 f2 	      jmp	beginscore
    800  f1fd
    801  f1fd
    802  f1fd					      if	((<*)>$d4)
    803  f200		       00 00 00 	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f200					      endif
    805  f200
    806  f200				   loop2
    807  f200		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f204				  -	      ifconst	pfscore
    810  f204				  -	      lda.w	pfscore1
    811  f204				  -	      sta	PF1
    812  f204					      else
    813  f204				  -	      ifconst	scorefade
    814  f204				  -	      sleep	2
    815  f204				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f204					      else
      0  f204					      sleep	7
      1  f204				   .CYCLES    SET	7
      2  f204
      3  f204				  -	      IF	.CYCLES < 2
      4  f204				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f204				  -	      ERR
      6  f204					      ENDIF
      7  f204
      8  f204					      IF	.CYCLES & 1
      9  f204					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f204		       04 00		      nop	0
     11  f206				  -	      ELSE
     12  f206				  -	      bit	VSYNC
     13  f206					      ENDIF
     14  f206				   .CYCLES    SET	.CYCLES - 3
     15  f206					      ENDIF
     16  f206
     17  f206					      REPEAT	.CYCLES / 2
     18  f206		       ea		      nop
     17  f206					      REPEND
     18  f207		       ea		      nop
     19  f208					      REPEND
    818  f208					      endif
    819  f208					      endif
    820  f208							; cycle 0
    821  f208				   beginscore
    822  f208		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f20a		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f20c		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f20e		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f210		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f212		       9a		      txs
    828  f213		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f215				  -	      ifconst	scorefade
    830  f215				  -	      lda	stack2
    831  f215					      else
      0  f215					      sleep	3
      1  f215				   .CYCLES    SET	3
      2  f215
      3  f215				  -	      IF	.CYCLES < 2
      4  f215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f215				  -	      ERR
      6  f215					      ENDIF
      7  f215
      8  f215					      IF	.CYCLES & 1
      9  f215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f215		       04 00		      nop	0
     11  f217				  -	      ELSE
     12  f217				  -	      bit	VSYNC
     13  f217					      ENDIF
     14  f217				   .CYCLES    SET	.CYCLES - 3
     15  f217					      ENDIF
     16  f217
     17  f217				  -	      REPEAT	.CYCLES / 2
     18  f217				  -	      nop
     19  f217					      REPEND
    833  f217					      endif
    834  f217
    835  f217				  -	      ifconst	pfscore
    836  f217				  -	      lda	pfscore2
    837  f217				  -	      sta	PF1
    838  f217					      else
    839  f217				  -	      ifconst	scorefade
    840  f217				  -	      sta	COLUP0
    841  f217				  -	      sta	COLUP1
    842  f217					      else
      0  f217					      sleep	6
      1  f217				   .CYCLES    SET	6
      2  f217
      3  f217				  -	      IF	.CYCLES < 2
      4  f217				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f217				  -	      ERR
      6  f217					      ENDIF
      7  f217
      8  f217				  -	      IF	.CYCLES & 1
      9  f217				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f217				  -	      nop	0
     11  f217				  -	      ELSE
     12  f217				  -	      bit	VSYNC
     13  f217				  -	      ENDIF
     14  f217				  -.CYCLES    SET	.CYCLES - 3
     15  f217					      ENDIF
     16  f217
     17  f217					      REPEAT	.CYCLES / 2
     18  f217		       ea		      nop
     17  f217					      REPEND
     18  f218		       ea		      nop
     17  f218					      REPEND
     18  f219		       ea		      nop
     19  f21a					      REPEND
    844  f21a					      endif
    845  f21a					      endif
    846  f21a
    847  f21a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f21c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f21e		       ba		      tsx
    850  f21f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f221		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f223		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f225		       88		      dey
    854  f226		       10 d8		      bpl	loop2	;+2 60 180
    855  f228
    856  f228		       a6 f6		      ldx	stack1
    857  f22a		       9a		      txs
    858  f22b							; lda scorepointers+1
    859  f22b		       a4 9c		      ldy	temp1
    860  f22d							; sta temp1
    861  f22d		       84 97		      sty	scorepointers+1
    862  f22f
    863  f22f		       a9 00		      LDA	#0
    864  f231		       85 0e		      sta	PF1
    865  f233		       85 1b		      STA	GRP0
    866  f235		       85 1c		      STA	GRP1
    867  f237		       85 25		      STA	VDELP0
    868  f239		       85 26		      STA	VDELP1	;do we need these
    869  f23b		       85 04		      STA	NUSIZ0
    870  f23d		       85 05		      STA	NUSIZ1
    871  f23f
    872  f23f							; lda scorepointers+3
    873  f23f		       a4 9e		      ldy	temp3
    874  f241							; sta temp3
    875  f241		       84 99		      sty	scorepointers+3
    876  f243
    877  f243							; lda scorepointers+5
    878  f243		       a4 a0		      ldy	temp5
    879  f245							; sta temp5
    880  f245		       84 9b		      sty	scorepointers+5
    881  f247					      endif		;noscore
    882  f247				  -	      ifconst	readpaddle
    883  f247				  -	      lda	#%11000010
    884  f247					      else
    885  f247				  -	      ifconst	qtcontroller
    886  f247				  -	      lda	qtcontroller
    887  f247				  -	      lsr		; bit 0 in carry
    888  f247				  -	      lda	#4
    889  f247				  -	      ror		; carry into top of A
    890  f247					      else
    891  f247		       a9 02		      lda	#2
    892  f249					      endif		; qtcontroller
    893  f249					      endif		; readpaddle
    894  f249		       85 02		      sta	WSYNC
    895  f24b		       85 01		      sta	VBLANK
      0  f24d					      RETURN
      1  f24d					      ifnconst	bankswitch
      2  f24d		       60		      rts
      3  f24e				  -	      else
      4  f24e				  -	      jmp	BS_return
      5  f24e					      endif
    897  f24e				  -	      ifconst	shakescreen
    898  f24e				  -doshakescreen
    899  f24e				  -	      bit	shakescreen
    900  f24e				  -	      bmi	noshakescreen
    901  f24e				  -	      sta	WSYNC
    902  f24e				  -noshakescreen
    903  f24e				  -	      ldx	missile0height
    904  f24e				  -	      inx
    905  f24e				  -	      rts
    906  f24e					      endif
    907  f24e
    908  f24e							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f24e
    910  f24e							; playfield drawing routines
    911  f24e							; you get a 32x12 bitmapped display in a single color :)
    912  f24e							; 0-31 and 0-11
    913  f24e
    914  f24e				   pfclear		; clears playfield - or fill with pattern
    915  f24e				  -	      ifconst	pfres
    916  f24e				  -	      ldx	#pfres*pfwidth-1
    917  f24e					      else
    918  f24e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f250					      endif
    920  f250				   pfclear_loop
    921  f250					      ifnconst	superchip
    922  f250		       95 a4		      sta	playfield,x
    923  f252				  -	      else
    924  f252				  -	      sta	playfield-128,x
    925  f252					      endif
    926  f252		       ca		      dex
    927  f253		       10 fb		      bpl	pfclear_loop
      0  f255					      RETURN
      1  f255					      ifnconst	bankswitch
      2  f255		       60		      rts
      3  f256				  -	      else
      4  f256				  -	      jmp	BS_return
      5  f256					      endif
    929  f256
    930  f256				   setuppointers
    931  f256		       86 9d		      stx	temp2	; store on.off.flip value
    932  f258		       aa		      tax		; put x-value in x 
    933  f259		       4a		      lsr
    934  f25a		       4a		      lsr
    935  f25b		       4a		      lsr		; divide x pos by 8 
    936  f25c		       85 9c		      sta	temp1
    937  f25e		       98		      tya
    938  f25f		       0a		      asl
    939  f260					      if	pfwidth=4
    940  f260		       0a		      asl		; multiply y pos by 4
    941  f261					      endif		; else multiply by 2
    942  f261		       18		      clc
    943  f262		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f264		       a8		      tay		; put the value in y
    945  f265		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f267		       60		      rts
    947  f268
    948  f268				   pfread
    949  f268							;x=xvalue, y=yvalue
    950  f268		       20 56 f2 	      jsr	setuppointers
    951  f26b		       bd d0 f2 	      lda	setbyte,x
    952  f26e		       39 a4 00 	      and	playfield,y
    953  f271		       5d d0 f2 	      eor	setbyte,x
    954  f274							; beq readzero
    955  f274							; lda #1
    956  f274							; readzero
      0  f274					      RETURN
      1  f274					      ifnconst	bankswitch
      2  f274		       60		      rts
      3  f275				  -	      else
      4  f275				  -	      jmp	BS_return
      5  f275					      endif
    958  f275
    959  f275				   pfpixel
    960  f275							;x=xvalue, y=yvalue, a=0,1,2
    961  f275		       20 56 f2 	      jsr	setuppointers
    962  f278
    963  f278				  -	      ifconst	bankswitch
    964  f278				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f278				  -	      beq	pixelon_r	; if "on" go to on
    966  f278				  -	      lsr
    967  f278				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f278				  -	      lda	playfield,y	; if here, it's "flip"
    969  f278				  -	      eor	setbyte,x
    970  f278				  -	      ifconst	superchip
    971  f278				  -	      sta	playfield-128,y
    972  f278				  -	      else
    973  f278				  -	      sta	playfield,y
    974  f278				  -	      endif
    975  f278				  -	      RETURN
    976  f278				  -pixelon_r
    977  f278				  -	      lda	playfield,y
    978  f278				  -	      ora	setbyte,x
    979  f278				  -	      ifconst	superchip
    980  f278				  -	      sta	playfield-128,y
    981  f278				  -	      else
    982  f278				  -	      sta	playfield,y
    983  f278				  -	      endif
    984  f278				  -	      RETURN
    985  f278				  -pixeloff_r
    986  f278				  -	      lda	setbyte,x
    987  f278				  -	      eor	#$ff
    988  f278				  -	      and	playfield,y
    989  f278				  -	      ifconst	superchip
    990  f278				  -	      sta	playfield-128,y
    991  f278				  -	      else
    992  f278				  -	      sta	playfield,y
    993  f278				  -	      endif
    994  f278				  -	      RETURN
    995  f278				  -
    996  f278					      else
    997  f278		       4c a9 f2 	      jmp	plotpoint
    998  f27b					      endif
    999  f27b
   1000  f27b				   pfhline
   1001  f27b							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f27b		       20 56 f2 	      jsr	setuppointers
   1003  f27e		       4c 88 f2 	      jmp	noinc
   1004  f281				   keepgoing
   1005  f281		       e8		      inx
   1006  f282		       8a		      txa
   1007  f283		       29 07		      and	#7
   1008  f285		       d0 01		      bne	noinc
   1009  f287		       c8		      iny
   1010  f288				   noinc
   1011  f288		       20 a9 f2 	      jsr	plotpoint
   1012  f28b		       e4 9e		      cpx	temp3
   1013  f28d		       30 f2		      bmi	keepgoing
      0  f28f					      RETURN
      1  f28f					      ifnconst	bankswitch
      2  f28f		       60		      rts
      3  f290				  -	      else
      4  f290				  -	      jmp	BS_return
      5  f290					      endif
   1015  f290
   1016  f290				   pfvline
   1017  f290							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f290		       20 56 f2 	      jsr	setuppointers
   1019  f293		       84 9c		      sty	temp1	; store memory location offset
   1020  f295		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f297		       a5 9e		      lda	temp3
   1022  f299		       0a		      asl
   1023  f29a					      if	pfwidth=4
   1024  f29a		       0a		      asl		; multiply by 4
   1025  f29b					      endif		; else multiply by 2
   1026  f29b		       85 9e		      sta	temp3	; store it
   1027  f29d							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f29d							; right now, temp1=y=starting memory location, temp3=final
   1029  f29d							; x should equal original x value
   1030  f29d				   keepgoingy
   1031  f29d		       20 a9 f2 	      jsr	plotpoint
   1032  f2a0		       c8		      iny
   1033  f2a1		       c8		      iny
   1034  f2a2					      if	pfwidth=4
   1035  f2a2		       c8		      iny
   1036  f2a3		       c8		      iny
   1037  f2a4					      endif
   1038  f2a4		       c4 9e		      cpy	temp3
   1039  f2a6		       30 f5		      bmi	keepgoingy
      0  f2a8					      RETURN
      1  f2a8					      ifnconst	bankswitch
      2  f2a8		       60		      rts
      3  f2a9				  -	      else
      4  f2a9				  -	      jmp	BS_return
      5  f2a9					      endif
   1041  f2a9
   1042  f2a9				   plotpoint
   1043  f2a9		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2ab		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2ad		       4a		      lsr
   1046  f2ae		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b0		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2b3		       5d d0 f2 	      eor	setbyte,x
   1049  f2b6				  -	      ifconst	superchip
   1050  f2b6				  -	      sta	playfield-128,y
   1051  f2b6					      else
   1052  f2b6		       99 a4 00 	      sta	playfield,y
   1053  f2b9					      endif
   1054  f2b9		       60		      rts
   1055  f2ba				   pixelon
   1056  f2ba		       b9 a4 00 	      lda	playfield,y
   1057  f2bd		       1d d0 f2 	      ora	setbyte,x
   1058  f2c0				  -	      ifconst	superchip
   1059  f2c0				  -	      sta	playfield-128,y
   1060  f2c0					      else
   1061  f2c0		       99 a4 00 	      sta	playfield,y
   1062  f2c3					      endif
   1063  f2c3		       60		      rts
   1064  f2c4				   pixeloff
   1065  f2c4		       bd d0 f2 	      lda	setbyte,x
   1066  f2c7		       49 ff		      eor	#$ff
   1067  f2c9		       39 a4 00 	      and	playfield,y
   1068  f2cc				  -	      ifconst	superchip
   1069  f2cc				  -	      sta	playfield-128,y
   1070  f2cc					      else
   1071  f2cc		       99 a4 00 	      sta	playfield,y
   1072  f2cf					      endif
   1073  f2cf		       60		      rts
   1074  f2d0
   1075  f2d0				   setbyte
   1076  f2d0					      ifnconst	pfcenter
   1077  f2d0		       80		      .byte.b	$80
   1078  f2d1		       40		      .byte.b	$40
   1079  f2d2		       20		      .byte.b	$20
   1080  f2d3		       10		      .byte.b	$10
   1081  f2d4		       08		      .byte.b	$08
   1082  f2d5		       04		      .byte.b	$04
   1083  f2d6		       02		      .byte.b	$02
   1084  f2d7		       01		      .byte.b	$01
   1085  f2d8					      endif
   1086  f2d8		       01		      .byte.b	$01
   1087  f2d9		       02		      .byte.b	$02
   1088  f2da		       04		      .byte.b	$04
   1089  f2db		       08		      .byte.b	$08
   1090  f2dc		       10		      .byte.b	$10
   1091  f2dd		       20		      .byte.b	$20
   1092  f2de		       40		      .byte.b	$40
   1093  f2df		       80		      .byte.b	$80
   1094  f2e0		       80		      .byte.b	$80
   1095  f2e1		       40		      .byte.b	$40
   1096  f2e2		       20		      .byte.b	$20
   1097  f2e3		       10		      .byte.b	$10
   1098  f2e4		       08		      .byte.b	$08
   1099  f2e5		       04		      .byte.b	$04
   1100  f2e6		       02		      .byte.b	$02
   1101  f2e7		       01		      .byte.b	$01
   1102  f2e8		       01		      .byte.b	$01
   1103  f2e9		       02		      .byte.b	$02
   1104  f2ea		       04		      .byte.b	$04
   1105  f2eb		       08		      .byte.b	$08
   1106  f2ec		       10		      .byte.b	$10
   1107  f2ed		       20		      .byte.b	$20
   1108  f2ee		       40		      .byte.b	$40
   1109  f2ef		       80		      .byte.b	$80
   1110  f2f0							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f0
   1112  f2f0				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f0		       d0 13		      bne	notleft
   1114  f2f2							;left
   1115  f2f2				  -	      ifconst	pfres
   1116  f2f2				  -	      ldx	#pfres*4
   1117  f2f2					      else
   1118  f2f2		       a2 30		      ldx	#48
   1119  f2f4					      endif
   1120  f2f4				   leftloop
   1121  f2f4		       b5 a3		      lda	playfield-1,x
   1122  f2f6		       4a		      lsr
   1123  f2f7
   1124  f2f7				  -	      ifconst	superchip
   1125  f2f7				  -	      lda	playfield-2,x
   1126  f2f7				  -	      rol
   1127  f2f7				  -	      sta	playfield-130,x
   1128  f2f7				  -	      lda	playfield-3,x
   1129  f2f7				  -	      ror
   1130  f2f7				  -	      sta	playfield-131,x
   1131  f2f7				  -	      lda	playfield-4,x
   1132  f2f7				  -	      rol
   1133  f2f7				  -	      sta	playfield-132,x
   1134  f2f7				  -	      lda	playfield-1,x
   1135  f2f7				  -	      ror
   1136  f2f7				  -	      sta	playfield-129,x
   1137  f2f7					      else
   1138  f2f7		       36 a2		      rol	playfield-2,x
   1139  f2f9		       76 a1		      ror	playfield-3,x
   1140  f2fb		       36 a0		      rol	playfield-4,x
   1141  f2fd		       76 a3		      ror	playfield-1,x
   1142  f2ff					      endif
   1143  f2ff
   1144  f2ff		       8a		      txa
   1145  f300		       cb 04		      sbx	#4
   1146  f302		       d0 f0		      bne	leftloop
      0  f304					      RETURN
      1  f304					      ifnconst	bankswitch
      2  f304		       60		      rts
      3  f305				  -	      else
      4  f305				  -	      jmp	BS_return
      5  f305					      endif
   1148  f305
   1149  f305				   notleft
   1150  f305		       4a		      lsr
   1151  f306		       90 13		      bcc	notright
   1152  f308							;right
   1153  f308
   1154  f308				  -	      ifconst	pfres
   1155  f308				  -	      ldx	#pfres*4
   1156  f308					      else
   1157  f308		       a2 30		      ldx	#48
   1158  f30a					      endif
   1159  f30a				   rightloop
   1160  f30a		       b5 a0		      lda	playfield-4,x
   1161  f30c		       4a		      lsr
   1162  f30d				  -	      ifconst	superchip
   1163  f30d				  -	      lda	playfield-3,x
   1164  f30d				  -	      rol
   1165  f30d				  -	      sta	playfield-131,x
   1166  f30d				  -	      lda	playfield-2,x
   1167  f30d				  -	      ror
   1168  f30d				  -	      sta	playfield-130,x
   1169  f30d				  -	      lda	playfield-1,x
   1170  f30d				  -	      rol
   1171  f30d				  -	      sta	playfield-129,x
   1172  f30d				  -	      lda	playfield-4,x
   1173  f30d				  -	      ror
   1174  f30d				  -	      sta	playfield-132,x
   1175  f30d					      else
   1176  f30d		       36 a1		      rol	playfield-3,x
   1177  f30f		       76 a2		      ror	playfield-2,x
   1178  f311		       36 a3		      rol	playfield-1,x
   1179  f313		       76 a0		      ror	playfield-4,x
   1180  f315					      endif
   1181  f315		       8a		      txa
   1182  f316		       cb 04		      sbx	#4
   1183  f318		       d0 f0		      bne	rightloop
      0  f31a					      RETURN
      1  f31a					      ifnconst	bankswitch
      2  f31a		       60		      rts
      3  f31b				  -	      else
      4  f31b				  -	      jmp	BS_return
      5  f31b					      endif
   1185  f31b
   1186  f31b				   notright
   1187  f31b		       4a		      lsr
   1188  f31c		       90 49		      bcc	notup
   1189  f31e							;up
   1190  f31e		       4a		      lsr
   1191  f31f		       90 02		      bcc	onedecup
   1192  f321		       c6 ef		      dec	playfieldpos
   1193  f323				   onedecup
   1194  f323		       c6 ef		      dec	playfieldpos
   1195  f325		       f0 02		      beq	shiftdown
   1196  f327		       10 3d		      bpl	noshiftdown2
   1197  f329				   shiftdown
   1198  f329				  -	      ifconst	pfrowheight
   1199  f329				  -	      lda	#pfrowheight
   1200  f329					      else
   1201  f329					      ifnconst	pfres
   1202  f329		       a9 08		      lda	#8
   1203  f32b				  -	      else
   1204  f32b				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f32b					      endif
   1206  f32b					      endif
   1207  f32b
   1208  f32b		       85 ef		      sta	playfieldpos
   1209  f32d		       a5 a7		      lda	playfield+3
   1210  f32f		       85 9f		      sta	temp4
   1211  f331		       a5 a6		      lda	playfield+2
   1212  f333		       85 9e		      sta	temp3
   1213  f335		       a5 a5		      lda	playfield+1
   1214  f337		       85 9d		      sta	temp2
   1215  f339		       a5 a4		      lda	playfield
   1216  f33b		       85 9c		      sta	temp1
   1217  f33d		       a2 00		      ldx	#0
   1218  f33f				   up2
   1219  f33f		       b5 a8		      lda	playfield+4,x
   1220  f341				  -	      ifconst	superchip
   1221  f341				  -	      sta	playfield-128,x
   1222  f341				  -	      lda	playfield+5,x
   1223  f341				  -	      sta	playfield-127,x
   1224  f341				  -	      lda	playfield+6,x
   1225  f341				  -	      sta	playfield-126,x
   1226  f341				  -	      lda	playfield+7,x
   1227  f341				  -	      sta	playfield-125,x
   1228  f341					      else
   1229  f341		       95 a4		      sta	playfield,x
   1230  f343		       b5 a9		      lda	playfield+5,x
   1231  f345		       95 a5		      sta	playfield+1,x
   1232  f347		       b5 aa		      lda	playfield+6,x
   1233  f349		       95 a6		      sta	playfield+2,x
   1234  f34b		       b5 ab		      lda	playfield+7,x
   1235  f34d		       95 a7		      sta	playfield+3,x
   1236  f34f					      endif
   1237  f34f		       8a		      txa
   1238  f350		       cb fc		      sbx	#252
   1239  f352				  -	      ifconst	pfres
   1240  f352				  -	      cpx	#(pfres-1)*4
   1241  f352					      else
   1242  f352		       e0 2c		      cpx	#44
   1243  f354					      endif
   1244  f354		       d0 e9		      bne	up2
   1245  f356
   1246  f356		       a5 9f		      lda	temp4
   1247  f358
   1248  f358				  -	      ifconst	superchip
   1249  f358				  -	      ifconst	pfres
   1250  f358				  -	      sta	playfield+pfres*4-129
   1251  f358				  -	      lda	temp3
   1252  f358				  -	      sta	playfield+pfres*4-130
   1253  f358				  -	      lda	temp2
   1254  f358				  -	      sta	playfield+pfres*4-131
   1255  f358				  -	      lda	temp1
   1256  f358				  -	      sta	playfield+pfres*4-132
   1257  f358				  -	      else
   1258  f358				  -	      sta	playfield+47-128
   1259  f358				  -	      lda	temp3
   1260  f358				  -	      sta	playfield+46-128
   1261  f358				  -	      lda	temp2
   1262  f358				  -	      sta	playfield+45-128
   1263  f358				  -	      lda	temp1
   1264  f358				  -	      sta	playfield+44-128
   1265  f358				  -	      endif
   1266  f358					      else
   1267  f358				  -	      ifconst	pfres
   1268  f358				  -	      sta	playfield+pfres*4-1
   1269  f358				  -	      lda	temp3
   1270  f358				  -	      sta	playfield+pfres*4-2
   1271  f358				  -	      lda	temp2
   1272  f358				  -	      sta	playfield+pfres*4-3
   1273  f358				  -	      lda	temp1
   1274  f358				  -	      sta	playfield+pfres*4-4
   1275  f358					      else
   1276  f358		       85 d3		      sta	playfield+47
   1277  f35a		       a5 9e		      lda	temp3
   1278  f35c		       85 d2		      sta	playfield+46
   1279  f35e		       a5 9d		      lda	temp2
   1280  f360		       85 d1		      sta	playfield+45
   1281  f362		       a5 9c		      lda	temp1
   1282  f364		       85 d0		      sta	playfield+44
   1283  f366					      endif
   1284  f366					      endif
   1285  f366				   noshiftdown2
      0  f366					      RETURN
      1  f366					      ifnconst	bankswitch
      2  f366		       60		      rts
      3  f367				  -	      else
      4  f367				  -	      jmp	BS_return
      5  f367					      endif
   1287  f367
   1288  f367
   1289  f367				   notup
   1290  f367							;down
   1291  f367		       4a		      lsr
   1292  f368		       b0 02		      bcs	oneincup
   1293  f36a		       e6 ef		      inc	playfieldpos
   1294  f36c				   oneincup
   1295  f36c		       e6 ef		      inc	playfieldpos
   1296  f36e		       a5 ef		      lda	playfieldpos
   1297  f370
   1298  f370				  -	      ifconst	pfrowheight
   1299  f370				  -	      cmp	#pfrowheight+1
   1300  f370					      else
   1301  f370					      ifnconst	pfres
   1302  f370		       c9 09		      cmp	#9
   1303  f372				  -	      else
   1304  f372				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f372					      endif
   1306  f372					      endif
   1307  f372
   1308  f372		       90 3b		      bcc	noshiftdown
   1309  f374		       a9 01		      lda	#1
   1310  f376		       85 ef		      sta	playfieldpos
   1311  f378
   1312  f378				  -	      ifconst	pfres
   1313  f378				  -	      lda	playfield+pfres*4-1
   1314  f378				  -	      sta	temp4
   1315  f378				  -	      lda	playfield+pfres*4-2
   1316  f378				  -	      sta	temp3
   1317  f378				  -	      lda	playfield+pfres*4-3
   1318  f378				  -	      sta	temp2
   1319  f378				  -	      lda	playfield+pfres*4-4
   1320  f378					      else
   1321  f378		       a5 d3		      lda	playfield+47
   1322  f37a		       85 9f		      sta	temp4
   1323  f37c		       a5 d2		      lda	playfield+46
   1324  f37e		       85 9e		      sta	temp3
   1325  f380		       a5 d1		      lda	playfield+45
   1326  f382		       85 9d		      sta	temp2
   1327  f384		       a5 d0		      lda	playfield+44
   1328  f386					      endif
   1329  f386
   1330  f386		       85 9c		      sta	temp1
   1331  f388
   1332  f388				  -	      ifconst	pfres
   1333  f388				  -	      ldx	#(pfres-1)*4
   1334  f388					      else
   1335  f388		       a2 2c		      ldx	#44
   1336  f38a					      endif
   1337  f38a				   down2
   1338  f38a		       b5 a3		      lda	playfield-1,x
   1339  f38c				  -	      ifconst	superchip
   1340  f38c				  -	      sta	playfield-125,x
   1341  f38c				  -	      lda	playfield-2,x
   1342  f38c				  -	      sta	playfield-126,x
   1343  f38c				  -	      lda	playfield-3,x
   1344  f38c				  -	      sta	playfield-127,x
   1345  f38c				  -	      lda	playfield-4,x
   1346  f38c				  -	      sta	playfield-128,x
   1347  f38c					      else
   1348  f38c		       95 a7		      sta	playfield+3,x
   1349  f38e		       b5 a2		      lda	playfield-2,x
   1350  f390		       95 a6		      sta	playfield+2,x
   1351  f392		       b5 a1		      lda	playfield-3,x
   1352  f394		       95 a5		      sta	playfield+1,x
   1353  f396		       b5 a0		      lda	playfield-4,x
   1354  f398		       95 a4		      sta	playfield,x
   1355  f39a					      endif
   1356  f39a		       8a		      txa
   1357  f39b		       cb 04		      sbx	#4
   1358  f39d		       d0 eb		      bne	down2
   1359  f39f
   1360  f39f		       a5 9f		      lda	temp4
   1361  f3a1				  -	      ifconst	superchip
   1362  f3a1				  -	      sta	playfield-125
   1363  f3a1				  -	      lda	temp3
   1364  f3a1				  -	      sta	playfield-126
   1365  f3a1				  -	      lda	temp2
   1366  f3a1				  -	      sta	playfield-127
   1367  f3a1				  -	      lda	temp1
   1368  f3a1				  -	      sta	playfield-128
   1369  f3a1					      else
   1370  f3a1		       85 a7		      sta	playfield+3
   1371  f3a3		       a5 9e		      lda	temp3
   1372  f3a5		       85 a6		      sta	playfield+2
   1373  f3a7		       a5 9d		      lda	temp2
   1374  f3a9		       85 a5		      sta	playfield+1
   1375  f3ab		       a5 9c		      lda	temp1
   1376  f3ad		       85 a4		      sta	playfield
   1377  f3af					      endif
   1378  f3af				   noshiftdown
      0  f3af					      RETURN
      1  f3af					      ifnconst	bankswitch
      2  f3af		       60		      rts
      3  f3b0				  -	      else
      4  f3b0				  -	      jmp	BS_return
      5  f3b0					      endif
   1380  f3b0							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b0
   1382  f3b0							;standard routines needed for pretty much all games
   1383  f3b0							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b0							; repositioning code and score pointer setup moved to overscan
   1385  f3b0							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b0
   1387  f3b0				   randomize
   1388  f3b0		       a5 a2		      lda	rand
   1389  f3b2		       4a		      lsr
   1390  f3b3				  -	      ifconst	rand16
   1391  f3b3				  -	      rol	rand16
   1392  f3b3					      endif
   1393  f3b3		       90 02		      bcc	noeor
   1394  f3b5		       49 b4		      eor	#$B4
   1395  f3b7				   noeor
   1396  f3b7		       85 a2		      sta	rand
   1397  f3b9				  -	      ifconst	rand16
   1398  f3b9				  -	      eor	rand16
   1399  f3b9					      endif
      0  f3b9					      RETURN
      1  f3b9					      ifnconst	bankswitch
      2  f3b9		       60		      rts
      3  f3ba				  -	      else
      4  f3ba				  -	      jmp	BS_return
      5  f3ba					      endif
   1401  f3ba							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3ba
   1403  f3ba				   drawscreen
   1404  f3ba				  -	      ifconst	debugscore
   1405  f3ba				  -	      ldx	#14
   1406  f3ba				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3ba				  -
   1408  f3ba				  -	      ifconst	mincycles
   1409  f3ba				  -	      lda	mincycles
   1410  f3ba				  -	      cmp	INTIM
   1411  f3ba				  -	      lda	mincycles
   1412  f3ba				  -	      bcc	nochange
   1413  f3ba				  -	      lda	INTIM
   1414  f3ba				  -	      sta	mincycles
   1415  f3ba				  -nochange
   1416  f3ba				  -	      endif
   1417  f3ba				  -
   1418  f3ba				  -			; cmp #$2B
   1419  f3ba				  -			; bcs no_cycles_left
   1420  f3ba				  -	      bmi	cycles_left
   1421  f3ba				  -	      ldx	#64
   1422  f3ba				  -	      eor	#$ff	;make negative
   1423  f3ba				  -cycles_left
   1424  f3ba				  -	      stx	scorecolor
   1425  f3ba				  -	      and	#$7f	; clear sign bit
   1426  f3ba				  -	      tax
   1427  f3ba				  -	      lda	scorebcd,x
   1428  f3ba				  -	      sta	score+2
   1429  f3ba				  -	      lda	scorebcd1,x
   1430  f3ba				  -	      sta	score+1
   1431  f3ba				  -	      jmp	done_debugscore
   1432  f3ba				  -scorebcd
   1433  f3ba				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3ba				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3ba				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3ba				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3ba				  -scorebcd1
   1438  f3ba				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3ba				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3ba				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3ba				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3ba				  -done_debugscore
   1443  f3ba					      endif
   1444  f3ba
   1445  f3ba				  -	      ifconst	debugcycles
   1446  f3ba				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3ba				  -			; cmp #$2B
   1448  f3ba				  -			; BCC overscan
   1449  f3ba				  -	      bmi	overscan
   1450  f3ba				  -	      sta	COLUBK
   1451  f3ba				  -	      bcs	doneoverscan
   1452  f3ba					      endif
   1453  f3ba
   1454  f3ba				   overscan
   1455  f3ba				  -	      ifconst	interlaced
   1456  f3ba				  -	      PHP
   1457  f3ba				  -	      PLA
   1458  f3ba				  -	      EOR	#4	; flip interrupt bit
   1459  f3ba				  -	      PHA
   1460  f3ba				  -	      PLP
   1461  f3ba				  -	      AND	#4	; isolate the interrupt bit
   1462  f3ba				  -	      TAX		; save it for later
   1463  f3ba					      endif
   1464  f3ba
   1465  f3ba				   overscanloop
   1466  f3ba		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3bd		       30 fb		      bmi	overscanloop
   1468  f3bf				   doneoverscan
   1469  f3bf
   1470  f3bf							;do VSYNC
   1471  f3bf
   1472  f3bf				  -	      ifconst	interlaced
   1473  f3bf				  -	      CPX	#4
   1474  f3bf				  -	      BNE	oddframevsync
   1475  f3bf					      endif
   1476  f3bf
   1477  f3bf		       a9 02		      lda	#2
   1478  f3c1		       85 02		      sta	WSYNC
   1479  f3c3		       85 00		      sta	VSYNC
   1480  f3c5		       85 02		      STA	WSYNC
   1481  f3c7		       85 02		      STA	WSYNC
   1482  f3c9		       4a		      lsr
   1483  f3ca		       85 02		      STA	WSYNC
   1484  f3cc		       85 00		      STA	VSYNC
   1485  f3ce		       85 01		      sta	VBLANK
   1486  f3d0					      ifnconst	overscan_time
   1487  f3d0		       a9 a5		      lda	#37+128
   1488  f3d2				  -	      else
   1489  f3d2				  -	      lda	#overscan_time+128
   1490  f3d2					      endif
   1491  f3d2		       8d 96 02 	      sta	TIM64T
   1492  f3d5
   1493  f3d5				  -	      ifconst	interlaced
   1494  f3d5				  -	      jmp	postsync
   1495  f3d5				  -
   1496  f3d5				  -oddframevsync
   1497  f3d5				  -	      sta	WSYNC
   1498  f3d5				  -
   1499  f3d5				  -	      LDA	($80,X)	; 11 waste
   1500  f3d5				  -	      LDA	($80,X)	; 11 waste
   1501  f3d5				  -	      LDA	($80,X)	; 11 waste
   1502  f3d5				  -
   1503  f3d5				  -	      lda	#2
   1504  f3d5				  -	      sta	VSYNC
   1505  f3d5				  -	      sta	WSYNC
   1506  f3d5				  -	      sta	WSYNC
   1507  f3d5				  -	      sta	WSYNC
   1508  f3d5				  -
   1509  f3d5				  -	      LDA	($80,X)	; 11 waste
   1510  f3d5				  -	      LDA	($80,X)	; 11 waste
   1511  f3d5				  -	      LDA	($80,X)	; 11 waste
   1512  f3d5				  -
   1513  f3d5				  -	      lda	#0
   1514  f3d5				  -	      sta	VSYNC
   1515  f3d5				  -	      sta	VBLANK
   1516  f3d5				  -	      ifnconst	overscan_time
   1517  f3d5				  -	      lda	#37+128
   1518  f3d5				  -	      else
   1519  f3d5				  -	      lda	#overscan_time+128
   1520  f3d5				  -	      endif
   1521  f3d5				  -	      sta	TIM64T
   1522  f3d5				  -
   1523  f3d5				  -postsync
   1524  f3d5					      endif
   1525  f3d5
   1526  f3d5				  -	      ifconst	legacy
   1527  f3d5				  -	      if	legacy < 100
   1528  f3d5				  -	      ldx	#4
   1529  f3d5				  -adjustloop
   1530  f3d5				  -	      lda	player0x,x
   1531  f3d5				  -	      sec
   1532  f3d5				  -	      sbc	#14	;?
   1533  f3d5				  -	      sta	player0x,x
   1534  f3d5				  -	      dex
   1535  f3d5				  -	      bpl	adjustloop
   1536  f3d5				  -	      endif
   1537  f3d5					      endif
   1538  f3d5				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3d5				  -	      repeat	($fa-(<*))
   1540  f3d5				  -	      nop
   1541  f3d5				  -	      repend
   1542  f3d5					      endif
   1543  f3d5		       85 02		      sta	WSYNC
   1544  f3d7		       a2 04		      ldx	#4
      0  f3d9					      SLEEP	3
      1  f3d9				   .CYCLES    SET	3
      2  f3d9
      3  f3d9				  -	      IF	.CYCLES < 2
      4  f3d9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3d9				  -	      ERR
      6  f3d9					      ENDIF
      7  f3d9
      8  f3d9					      IF	.CYCLES & 1
      9  f3d9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3d9		       04 00		      nop	0
     11  f3db				  -	      ELSE
     12  f3db				  -	      bit	VSYNC
     13  f3db					      ENDIF
     14  f3db				   .CYCLES    SET	.CYCLES - 3
     15  f3db					      ENDIF
     16  f3db
     17  f3db				  -	      REPEAT	.CYCLES / 2
     18  f3db				  -	      nop
     19  f3db					      REPEND
   1546  f3db				   HorPosLoop		; 5
   1547  f3db		       b5 80		      lda	player0x,X	;+4 9
   1548  f3dd		       38		      sec		;+2 11
   1549  f3de				   DivideLoop
   1550  f3de		       e9 0f		      sbc	#15
   1551  f3e0		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3e2		       95 9c		      sta	temp1,X	;+4 19
   1553  f3e4		       95 10		      sta	RESP0,X	;+4 23
   1554  f3e6		       85 02		      sta	WSYNC
   1555  f3e8		       ca		      dex
   1556  f3e9		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3eb							; 4
   1558  f3eb
   1559  f3eb		       a2 04		      ldx	#4
   1560  f3ed		       b4 9c		      ldy	temp1,X
   1561  f3ef		       b9 4b f3 	      lda	repostable-256,Y
   1562  f3f2		       95 20		      sta	HMP0,X	;+14 18
   1563  f3f4
   1564  f3f4		       ca		      dex
   1565  f3f5		       b4 9c		      ldy	temp1,X
   1566  f3f7		       b9 4b f3 	      lda	repostable-256,Y
   1567  f3fa		       95 20		      sta	HMP0,X	;+14 32
   1568  f3fc
   1569  f3fc		       ca		      dex
   1570  f3fd		       b4 9c		      ldy	temp1,X
   1571  f3ff		       b9 4b f3 	      lda	repostable-256,Y
   1572  f402		       95 20		      sta	HMP0,X	;+14 46
   1573  f404
   1574  f404		       ca		      dex
   1575  f405		       b4 9c		      ldy	temp1,X
   1576  f407		       b9 4b f3 	      lda	repostable-256,Y
   1577  f40a		       95 20		      sta	HMP0,X	;+14 60
   1578  f40c
   1579  f40c		       ca		      dex
   1580  f40d		       b4 9c		      ldy	temp1,X
   1581  f40f		       b9 4b f3 	      lda	repostable-256,Y
   1582  f412		       95 20		      sta	HMP0,X	;+14 74
   1583  f414
   1584  f414		       85 02		      sta	WSYNC
   1585  f416
   1586  f416		       85 2a		      sta	HMOVE	;+3 3
   1587  f418
   1588  f418
   1589  f418				  -	      ifconst	legacy
   1590  f418				  -	      if	legacy < 100
   1591  f418				  -	      ldx	#4
   1592  f418				  -adjustloop2
   1593  f418				  -	      lda	player0x,x
   1594  f418				  -	      clc
   1595  f418				  -	      adc	#14	;?
   1596  f418				  -	      sta	player0x,x
   1597  f418				  -	      dex
   1598  f418				  -	      bpl	adjustloop2
   1599  f418				  -	      endif
   1600  f418					      endif
   1601  f418
   1602  f418
   1603  f418
   1604  f418
   1605  f418							;set score pointers
   1606  f418		       a7 95		      lax	score+2
   1607  f41a		       20 4b f4 	      jsr	scorepointerset
   1608  f41d		       84 9b		      sty	scorepointers+5
   1609  f41f		       86 98		      stx	scorepointers+2
   1610  f421		       a7 94		      lax	score+1
   1611  f423		       20 4b f4 	      jsr	scorepointerset
   1612  f426		       84 9a		      sty	scorepointers+4
   1613  f428		       86 97		      stx	scorepointers+1
   1614  f42a		       a7 93		      lax	score
   1615  f42c		       20 4b f4 	      jsr	scorepointerset
   1616  f42f		       84 99		      sty	scorepointers+3
   1617  f431		       86 96		      stx	scorepointers
   1618  f433
   1619  f433				   vblk
   1620  f433							; run possible vblank bB code
   1621  f433				  -	      ifconst	vblank_bB_code
   1622  f433				  -	      jsr	vblank_bB_code
   1623  f433					      endif
   1624  f433				   vblk2
   1625  f433		       ad 84 02 	      LDA	INTIM
   1626  f436		       30 fb		      bmi	vblk2
   1627  f438		       4c 34 f0 	      jmp	kernel
   1628  f43b
   1629  f43b
   1630  f43b		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f444		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f44b				   repostable
   1633  f44b
   1634  f44b				   scorepointerset
   1635  f44b		       29 0f		      and	#$0F
   1636  f44d		       0a		      asl
   1637  f44e		       0a		      asl
   1638  f44f		       0a		      asl
   1639  f450		       69 9c		      adc	#<scoretable
   1640  f452		       a8		      tay
   1641  f453		       8a		      txa
   1642  f454							; and #$F0
   1643  f454							; lsr
   1644  f454		       4b f0		      asr	#$F0
   1645  f456		       69 9c		      adc	#<scoretable
   1646  f458		       aa		      tax
   1647  f459		       60		      rts
   1648  f45a				   game
   1649  f45a				   .
   1650  f45a							;;line 1;; 
   1651  f45a
   1652  f45a				   .
   1653  f45a							;;line 2;; 
   1654  f45a
   1655  f45a				   .
   1656  f45a							;;line 3;; 
   1657  f45a
   1658  f45a				   .
   1659  f45a							;;line 4;; 
   1660  f45a
   1661  f45a				   .L00 		;;line 5;;  set kernel_options pfcolors playercolors player1colors
   1662  f45a
   1663  f45a				   .
   1664  f45a							;;line 6;; 
   1665  f45a
   1666  f45a				   .L01 		;;line 7;;  playfield:
   1667  f45a
   1668  f45a				  -	      ifconst	pfres
   1669  f45a				  -	      ldx	#(12>pfres)*(pfres*pfwidth-1)+(12<=pfres)*47
   1670  f45a					      else
   1671  f45a		       a2 2f		      ldx	#((12*pfwidth-1)*((12*pfwidth-1)<47))+(47*((12*pfwidth-1)>=47))
   1672  f45c					      endif
   1673  f45c		       4c 8f f4 	      jmp	pflabel0
   1674  f45f				   PF_data0
   1675  f45f		       31 88		      .byte.b	%00110001, %10001000
   1676  f461					      if	(pfwidth>2)
   1677  f461		       18 00		      .byte.b	%00011000, %00000000
   1678  f463					      endif
   1679  f463		       3f ff		      .byte.b	%00111111, %11111111
   1680  f465					      if	(pfwidth>2)
   1681  f465		       f8 00		      .byte.b	%11111000, %00000000
   1682  f467					      endif
   1683  f467		       31 88		      .byte.b	%00110001, %10001000
   1684  f469					      if	(pfwidth>2)
   1685  f469		       18 00		      .byte.b	%00011000, %00000000
   1686  f46b					      endif
   1687  f46b		       31 88		      .byte.b	%00110001, %10001000
   1688  f46d					      if	(pfwidth>2)
   1689  f46d		       18 00		      .byte.b	%00011000, %00000000
   1690  f46f					      endif
   1691  f46f		       3f ff		      .byte.b	%00111111, %11111111
   1692  f471					      if	(pfwidth>2)
   1693  f471		       f8 00		      .byte.b	%11111000, %00000000
   1694  f473					      endif
   1695  f473		       31 88		      .byte.b	%00110001, %10001000
   1696  f475					      if	(pfwidth>2)
   1697  f475		       18 00		      .byte.b	%00011000, %00000000
   1698  f477					      endif
   1699  f477		       31 88		      .byte.b	%00110001, %10001000
   1700  f479					      if	(pfwidth>2)
   1701  f479		       18 00		      .byte.b	%00011000, %00000000
   1702  f47b					      endif
   1703  f47b		       3f ff		      .byte.b	%00111111, %11111111
   1704  f47d					      if	(pfwidth>2)
   1705  f47d		       f8 fc		      .byte.b	%11111000, %11111100
   1706  f47f					      endif
   1707  f47f		       31 88		      .byte.b	%00110001, %10001000
   1708  f481					      if	(pfwidth>2)
   1709  f481		       18 fc		      .byte.b	%00011000, %11111100
   1710  f483					      endif
   1711  f483		       31 88		      .byte.b	%00110001, %10001000
   1712  f485					      if	(pfwidth>2)
   1713  f485		       18 fe		      .byte.b	%00011000, %11111110
   1714  f487					      endif
   1715  f487		       31 ff		      .byte.b	%00110001, %11111111
   1716  f489					      if	(pfwidth>2)
   1717  f489		       f8 30		      .byte.b	%11111000, %00110000
   1718  f48b					      endif
   1719  f48b		       80 00		      .byte.b	%10000000, %00000000
   1720  f48d					      if	(pfwidth>2)
   1721  f48d		       00 00		      .byte.b	%00000000, %00000000
   1722  f48f					      endif
   1723  f48f				   pflabel0
   1724  f48f		       bd 5f f4 	      lda	PF_data0,x
   1725  f492		       95 a4		      sta	playfield,x
   1726  f494		       ca		      dex
   1727  f495		       10 f8		      bpl	pflabel0
   1728  f497				   .
   1729  f497							;;line 21;; 
   1730  f497
   1731  f497				   .
   1732  f497							;;line 22;; 
   1733  f497
   1734  f497				   .L02 		;;line 23;;  player0:
   1735  f497
   1736  f497		       a2 73		      LDX	#<playerL02_0
   1737  f499		       86 8a		      STX	player0pointerlo
   1738  f49b		       a9 f5		      LDA	#>playerL02_0
   1739  f49d		       85 8b		      STA	player0pointerhi
   1740  f49f		       a9 0f		      LDA	#15
   1741  f4a1		       85 8e		      STA	player0height
   1742  f4a3				   .
   1743  f4a3							;;line 41;; 
   1744  f4a3
   1745  f4a3				   .L03 		;;line 42;;  player1:
   1746  f4a3
   1747  f4a3		       a2 83		      LDX	#<playerL03_1
   1748  f4a5		       86 8c		      STX	player1pointerlo
   1749  f4a7		       a9 f5		      LDA	#>playerL03_1
   1750  f4a9		       85 8d		      STA	player1pointerhi
   1751  f4ab		       a9 04		      LDA	#4
   1752  f4ad		       85 8f		      STA	player1height
   1753  f4af				   .
   1754  f4af							;;line 49;; 
   1755  f4af
   1756  f4af				   .
   1757  f4af							;;line 50;; 
   1758  f4af
   1759  f4af				   .L04 		;;line 51;;  const WHITE = $0E
   1760  f4af
   1761  f4af				   .L05 		;;line 52;;  const YELLOW = $1E
   1762  f4af
   1763  f4af				   .
   1764  f4af							;;line 53;; 
   1765  f4af
   1766  f4af				   .L06 		;;line 54;;  const RED_LIGHT = $36
   1767  f4af
   1768  f4af				   .L07 		;;line 55;;  const RED = $34
   1769  f4af
   1770  f4af				   .L08 		;;line 56;;  const GRAY_LIGHT = $08
   1771  f4af
   1772  f4af				   .L09 		;;line 57;;  const GRAY = $04
   1773  f4af
   1774  f4af				   .L010		;;line 58;;  const BLUE_LIGHT = $AE
   1775  f4af
   1776  f4af				   .L011		;;line 59;;  const BLUE = $7A
   1777  f4af
   1778  f4af				   .L012		;;line 60;;  const BLUE_DARK = $78
   1779  f4af
   1780  f4af				   .L013		;;line 61;;  const TAN = $EC
   1781  f4af
   1782  f4af				   .L014		;;line 62;;  const TAN_DARK = EA
   1783  f4af
   1784  f4af				   .
   1785  f4af							;;line 63;; 
   1786  f4af
   1787  f4af				   .L015		;;line 64;;  const SCREEN_HEIGHT = 192
   1788  f4af
   1789  f4af				   .L016		;;line 65;;  const SCREEN_WIDTH = 160
   1790  f4af
   1791  f4af				   .
   1792  f4af							;;line 66;; 
   1793  f4af
   1794  f4af				   .
   1795  f4af							;;line 67;; 
   1796  f4af
   1797  f4af				   .L017		;;line 68;;  player0x = SCREEN_WIDTH  /  4  -	4
   1798  f4af
   1799  f4af							; complex statement detected
   1800  f4af		       a9 a0		      LDA	#SCREEN_WIDTH
   1801  f4b1		       4a		      lsr
   1802  f4b2		       4a		      lsr
   1803  f4b3		       38		      SEC
   1804  f4b4		       e9 04		      SBC	#4
   1805  f4b6		       85 80		      STA	player0x
   1806  f4b8				   .L018		;;line 69;;  player0y = SCREEN_HEIGHT	-  104
   1807  f4b8
   1808  f4b8		       a9 c0		      LDA	#SCREEN_HEIGHT
   1809  f4ba		       38		      SEC
   1810  f4bb		       e9 68		      SBC	#104
   1811  f4bd		       85 85		      STA	player0y
   1812  f4bf				   .
   1813  f4bf							;;line 70;; 
   1814  f4bf
   1815  f4bf				   .
   1816  f4bf							;;line 71;; 
   1817  f4bf
   1818  f4bf				   .L019		;;line 72;;  COLUBK = BLUE_LIGHT
   1819  f4bf
   1820  f4bf		       a9 ae		      LDA	#BLUE_LIGHT
   1821  f4c1		       85 09		      STA	COLUBK
   1822  f4c3				   .
   1823  f4c3							;;line 73;; 
   1824  f4c3
   1825  f4c3				   .
   1826  f4c3							;;line 74;; 
   1827  f4c3
   1828  f4c3				   .L020		;;line 75;;  dim _Frame_Counter = a
   1829  f4c3
   1830  f4c3				   .L021		;;line 76;;  _Frame_Counter = 0
   1831  f4c3
   1832  f4c3		       a9 00		      LDA	#0
   1833  f4c5		       85 d4		      STA	_Frame_Counter
   1834  f4c7				   .L022		;;line 77;;  missile1x = 50
   1835  f4c7
   1836  f4c7		       a9 32		      LDA	#50
   1837  f4c9		       85 83		      STA	missile1x
   1838  f4cb				   .L023		;;line 78;;  missile1y = 2
   1839  f4cb
   1840  f4cb		       a9 02		      LDA	#2
   1841  f4cd		       85 88		      STA	missile1y
   1842  f4cf				   .L024		;;line 79;;  player1x = 50
   1843  f4cf
   1844  f4cf		       a9 32		      LDA	#50
   1845  f4d1		       85 81		      STA	player1x
   1846  f4d3				   .L025		;;line 80;;  player1y = 50
   1847  f4d3
   1848  f4d3		       a9 32		      LDA	#50
   1849  f4d5		       85 86		      STA	player1y
   1850  f4d7				   .
   1851  f4d7							;;line 81;; 
   1852  f4d7
   1853  f4d7				   .
   1854  f4d7							;;line 82;; 
   1855  f4d7
   1856  f4d7				   .__p0movement
   1857  f4d7							;;line 83;; __p0movement
   1858  f4d7
   1859  f4d7				   .L026		;;line 84;;  if joy0right then player0x = player0x  +	1  :  _Frame_Counter = _Frame_Counter  +  1
   1860  f4d7
   1861  f4d7		       2c 80 02 	      bit	SWCHA
   1862  f4da		       30 04		      BMI	.skipL026
   1863  f4dc				   .condpart0
   1864  f4dc		       e6 80		      INC	player0x
   1865  f4de		       e6 d4		      INC	_Frame_Counter
   1866  f4e0				   .skipL026
   1867  f4e0				   .L027		;;line 85;;  if _Frame_Counter = 4 then _Frame_Counter = 0
   1868  f4e0
   1869  f4e0		       a5 d4		      LDA	_Frame_Counter
   1870  f4e2		       c9 04		      CMP	#4
   1871  f4e4		       d0 04		      BNE	.skipL027
   1872  f4e6				   .condpart1
   1873  f4e6		       a9 00		      LDA	#0
   1874  f4e8		       85 d4		      STA	_Frame_Counter
   1875  f4ea				   .skipL027
   1876  f4ea				   .L028		;;line 86;;  if _Frame_Counter = 0  || _Frame_Counter = 1 then __p0frame0
   1877  f4ea
   1878  f4ea		       a5 d4		      LDA	_Frame_Counter
   1879  f4ec		       c9 00		      CMP	#0
   1880  f4ee		       f0 38		      beq	.__p0frame0
   1881  f4f0		       a5 d4		      LDA	_Frame_Counter
   1882  f4f2		       c9 01		      CMP	#1
   1883  f4f4		       f0 32		      beq	.__p0frame0
   1884  f4f6				   .L029		;;line 87;;  if _Frame_Counter = 2  ||  _Frame_Counter = 3 then __p0frame1
   1885  f4f6
   1886  f4f6		       a5 d4		      LDA	_Frame_Counter
   1887  f4f8		       c9 02		      CMP	#2
   1888  f4fa		       f0 3b		      beq	.__p0frame1
   1889  f4fc		       a5 d4		      LDA	_Frame_Counter
   1890  f4fe		       c9 03		      CMP	#3
   1891  f500		       f0 35		      beq	.__p0frame1
   1892  f502				   .L030		;;line 88;;  if !joy0right then player0:
   1893  f502
   1894  f502		       2c 80 02 	      bit	SWCHA
   1895  f505		       10 0c		      BPL	.skipL030
   1896  f507				   .condpart2
   1897  f507		       a2 88		      LDX	#<player2then_0
   1898  f509		       86 8a		      STX	player0pointerlo
   1899  f50b		       a9 f5		      LDA	#>player2then_0
   1900  f50d		       85 8b		      STA	player0pointerhi
   1901  f50f		       a9 0f		      LDA	#15
   1902  f511		       85 8e		      STA	player0height
   1903  f513				   .skipL030
   1904  f513				   .
   1905  f513							;;line 106;; 
   1906  f513
   1907  f513				   .
   1908  f513							;;line 107;; 
   1909  f513
   1910  f513				   .L031		;;line 108;;  if joy0left then player0x = player0x  -	1
   1911  f513
   1912  f513		       2c 80 02 	      bit	SWCHA
   1913  f516		       70 02		      BVS	.skipL031
   1914  f518				   .condpart3
   1915  f518		       c6 80		      DEC	player0x
   1916  f51a				   .skipL031
   1917  f51a				   .L032		;;line 109;;  goto mainloop
   1918  f51a
   1919  f51a		       4c 46 f5 	      jmp	.mainloop
   1920  f51d
   1921  f51d				   .
   1922  f51d							;;line 110;; 
   1923  f51d
   1924  f51d				   .
   1925  f51d							;;line 111;; 
   1926  f51d
   1927  f51d				   .
   1928  f51d							;;line 112;; 
   1929  f51d
   1930  f51d				   .
   1931  f51d							;;line 113;; 
   1932  f51d
   1933  f51d				   .
   1934  f51d							;;line 114;; 
   1935  f51d
   1936  f51d				   .__randmissile1pos
   1937  f51d							;;line 115;; __randmissile1pos
   1938  f51d
   1939  f51d				   .L033		;;line 116;;  missile1x = rand  -  60
   1940  f51d
   1941  f51d		       20 b0 f3 	      jsr	randomize
   1942  f520		       38		      SEC
   1943  f521		       e9 3c		      SBC	#60
   1944  f523		       85 83		      STA	missile1x
   1945  f525				   .L034		;;line 117;;  goto mainloop
   1946  f525
   1947  f525		       4c 46 f5 	      jmp	.mainloop
   1948  f528
   1949  f528				   .
   1950  f528							;;line 118;; 
   1951  f528
   1952  f528				   .
   1953  f528							;;line 119;; 
   1954  f528
   1955  f528				   .__p0frame0
   1956  f528							;;line 120;; __p0frame0
   1957  f528
   1958  f528				   .L035		;;line 121;;  player0:
   1959  f528
   1960  f528		       a2 98		      LDX	#<playerL035_0
   1961  f52a		       86 8a		      STX	player0pointerlo
   1962  f52c		       a9 f5		      LDA	#>playerL035_0
   1963  f52e		       85 8b		      STA	player0pointerhi
   1964  f530		       a9 0f		      LDA	#15
   1965  f532		       85 8e		      STA	player0height
   1966  f534				   .L036		;;line 139;;  goto mainloop
   1967  f534
   1968  f534		       4c 46 f5 	      jmp	.mainloop
   1969  f537
   1970  f537				   .__p0frame1
   1971  f537							;;line 140;; __p0frame1
   1972  f537
   1973  f537				   .L037		;;line 141;;  player0:
   1974  f537
   1975  f537		       a2 a8		      LDX	#<playerL037_0
   1976  f539		       86 8a		      STX	player0pointerlo
   1977  f53b		       a9 f5		      LDA	#>playerL037_0
   1978  f53d		       85 8b		      STA	player0pointerhi
   1979  f53f		       a9 0f		      LDA	#15
   1980  f541		       85 8e		      STA	player0height
   1981  f543				   .L038		;;line 159;;  goto mainloop
   1982  f543
   1983  f543		       4c 46 f5 	      jmp	.mainloop
   1984  f546
   1985  f546				   .
   1986  f546							;;line 160;; 
   1987  f546
   1988  f546				   .
   1989  f546							;;line 161;; 
   1990  f546
   1991  f546				   .
   1992  f546							;;line 162;; 
   1993  f546
   1994  f546				   .
   1995  f546							;;line 163;; 
   1996  f546
   1997  f546				   .mainloop
   1998  f546							;;line 164;; mainloop
   1999  f546
   2000  f546				   .
   2001  f546							;;line 165;; 
   2002  f546
   2003  f546				   .L039		;;line 166;;  pfcolors:
   2004  f546
   2005  f546		       a9 34		      lda	# RED
   2006  f548		       85 08		      sta	COLUPF
   2007  f54a				  -	      ifconst	pfres
   2008  f54a				  -	      lda	#>(pfcolorlabel102-132+pfres*pfwidth)
   2009  f54a					      else
   2010  f54a		       a9 f5		      lda	#>(pfcolorlabel102-84)
   2011  f54c					      endif
   2012  f54c		       85 f1		      sta	pfcolortable+1
   2013  f54e				  -	      ifconst	pfres
   2014  f54e				  -	      lda	#<(pfcolorlabel102-132+pfres*pfwidth)
   2015  f54e					      else
   2016  f54e		       a9 64		      lda	#<(pfcolorlabel102-84)
   2017  f550					      endif
   2018  f550		       85 f0		      sta	pfcolortable
   2019  f552				   .L040		;;line 179;;  player1color:
   2020  f552
   2021  f552		       a2 e0		      LDX	#<playercolorL040_1
   2022  f554		       86 87		      STX	player1color
   2023  f556		       a9 f5		      LDA	#>playercolorL040_1
   2024  f558		       85 88		      STA	player1color+1
   2025  f55a				   .L041		;;line 186;;  player0color:
   2026  f55a
   2027  f55a		       a2 e5		      LDX	#<playercolorL041_0
   2028  f55c		       86 90		      STX	player0color
   2029  f55e		       a9 f5		      LDA	#>playercolorL041_0
   2030  f560		       85 91		      STA	player0color+1
   2031  f562				   .L042		;;line 196;;  drawscreen
   2032  f562
   2033  f562		       20 ba f3 	      jsr	drawscreen
   2034  f565				   .L043		;;line 197;;  COLUP1 = YELLOW
   2035  f565
   2036  f565		       a9 1e		      LDA	#YELLOW
   2037  f567		       85 07		      STA	COLUP1
   2038  f569				   .L044		;;line 198;;  COLUP0 = WHITE
   2039  f569
   2040  f569		       a9 0e		      LDA	#WHITE
   2041  f56b		       85 06		      STA	COLUP0
   2042  f56d				   .L045		;;line 199;;  goto __p0movement
   2043  f56d
   2044  f56d		       4c d7 f4 	      jmp	.__p0movement
   2045  f570
   2046  f570				   .L046		;;line 200;;  goto mainloop
   2047  f570
   2048  f570		       4c 46 f5 	      jmp	.mainloop
   2049  f573
   2050  f573				   .
   2051  f573							;;line 201;; 
   2052  f573
   2053  f573				   .
   2054  f573							;;line 202;; 
   2055  f573
   2056  f573				   .
   2057  f573							;;line 203;; 
   2058  f573
   2059  f573				  -	      if	(<*) > (<(*+15))
   2060  f573				  -	      repeat	($100-<*)
   2061  f573				  -	      .byte	0
   2062  f573				  -	      repend
   2063  f573					      endif
   2064  f573				   playerL02_0
   2065  f573		       36		      .byte.b	%00110110
   2066  f574		       24		      .byte.b	%00100100
   2067  f575		       24		      .byte.b	%00100100
   2068  f576		       24		      .byte.b	%00100100
   2069  f577		       3c		      .byte.b	%00111100
   2070  f578		       18		      .byte.b	%00011000
   2071  f579		       5a		      .byte.b	%01011010
   2072  f57a		       5a		      .byte.b	%01011010
   2073  f57b		       5a		      .byte.b	%01011010
   2074  f57c		       3c		      .byte.b	%00111100
   2075  f57d		       3c		      .byte.b	%00111100
   2076  f57e		       00		      .byte.b	%00000000
   2077  f57f		       18		      .byte.b	%00011000
   2078  f580		       18		      .byte.b	%00011000
   2079  f581		       00		      .byte.b	%00000000
   2080  f582		       00		      .byte.b	%00000000
   2081  f583				  -	      if	(<*) > (<(*+4))
   2082  f583				  -	      repeat	($100-<*)
   2083  f583				  -	      .byte	0
   2084  f583				  -	      repend
   2085  f583					      endif
   2086  f583				   playerL03_1
   2087  f583		       7f		      .byte.b	%1111111
   2088  f584		       7f		      .byte.b	%1111111
   2089  f585		       7f		      .byte.b	%1111111
   2090  f586		       63		      .byte.b	%1100011
   2091  f587		       7f		      .byte.b	%1111111
   2092  f588				  -	      if	(<*) > (<(*+15))
   2093  f588				  -	      repeat	($100-<*)
   2094  f588				  -	      .byte	0
   2095  f588				  -	      repend
   2096  f588					      endif
   2097  f588				   player2then_0
   2098  f588		       36		      .byte.b	%00110110
   2099  f589		       24		      .byte.b	%00100100
   2100  f58a		       24		      .byte.b	%00100100
   2101  f58b		       24		      .byte.b	%00100100
   2102  f58c		       3c		      .byte.b	%00111100
   2103  f58d		       18		      .byte.b	%00011000
   2104  f58e		       5a		      .byte.b	%01011010
   2105  f58f		       5a		      .byte.b	%01011010
   2106  f590		       5a		      .byte.b	%01011010
   2107  f591		       3c		      .byte.b	%00111100
   2108  f592		       3c		      .byte.b	%00111100
   2109  f593		       00		      .byte.b	%00000000
   2110  f594		       18		      .byte.b	%00011000
   2111  f595		       18		      .byte.b	%00011000
   2112  f596		       00		      .byte.b	%00000000
   2113  f597		       00		      .byte.b	%00000000
   2114  f598				  -	      if	(<*) > (<(*+15))
   2115  f598				  -	      repeat	($100-<*)
   2116  f598				  -	      .byte	0
   2117  f598				  -	      repend
   2118  f598					      endif
   2119  f598				   playerL035_0
   2120  f598		       06		      .byte.b	%00000110
   2121  f599		       34		      .byte.b	%00110100
   2122  f59a		       24		      .byte.b	%00100100
   2123  f59b		       24		      .byte.b	%00100100
   2124  f59c		       3c		      .byte.b	%00111100
   2125  f59d		       18		      .byte.b	%00011000
   2126  f59e		       5a		      .byte.b	%01011010
   2127  f59f		       5a		      .byte.b	%01011010
   2128  f5a0		       5a		      .byte.b	%01011010
   2129  f5a1		       3c		      .byte.b	%00111100
   2130  f5a2		       3c		      .byte.b	%00111100
   2131  f5a3		       00		      .byte.b	%00000000
   2132  f5a4		       18		      .byte.b	%00011000
   2133  f5a5		       18		      .byte.b	%00011000
   2134  f5a6		       00		      .byte.b	%00000000
   2135  f5a7		       00		      .byte.b	%00000000
   2136  f5a8				  -	      if	(<*) > (<(*+15))
   2137  f5a8				  -	      repeat	($100-<*)
   2138  f5a8				  -	      .byte	0
   2139  f5a8				  -	      repend
   2140  f5a8					      endif
   2141  f5a8				   playerL037_0
   2142  f5a8		       30		      .byte.b	%00110000
   2143  f5a9		       26		      .byte.b	%00100110
   2144  f5aa		       24		      .byte.b	%00100100
   2145  f5ab		       24		      .byte.b	%00100100
   2146  f5ac		       3c		      .byte.b	%00111100
   2147  f5ad		       18		      .byte.b	%00011000
   2148  f5ae		       5a		      .byte.b	%01011010
   2149  f5af		       5a		      .byte.b	%01011010
   2150  f5b0		       5a		      .byte.b	%01011010
   2151  f5b1		       3c		      .byte.b	%00111100
   2152  f5b2		       3c		      .byte.b	%00111100
   2153  f5b3		       00		      .byte.b	%00000000
   2154  f5b4		       18		      .byte.b	%00011000
   2155  f5b5		       18		      .byte.b	%00011000
   2156  f5b6		       00		      .byte.b	%00000000
   2157  f5b7		       00		      .byte.b	%00000000
   2158  f5b8				  -	      ifconst	pfres
   2159  f5b8				  -	      if	(<*) > (254-pfres*pfwidth)
   2160  f5b8				  -	      align	256
   2161  f5b8				  -	      endif
   2162  f5b8				  -	      if	(<*) < (136-pfres*pfwidth)
   2163  f5b8				  -	      repeat	((136-pfres*pfwidth)-(<*))
   2164  f5b8				  -	      .byte	0
   2165  f5b8				  -	      repend
   2166  f5b8				  -	      endif
   2167  f5b8					      else
   2168  f5b8				  -	      if	(<*) > 206
   2169  f5b8				  -	      align	256
   2170  f5b8					      endif
   2171  f5b8				  -	      if	(<*) < 88
   2172  f5b8				  -	      repeat	(88-(<*))
   2173  f5b8				  -	      .byte	0
   2174  f5b8				  -	      repend
   2175  f5b8					      endif
   2176  f5b8					      endif
   2177  f5b8				   pfcolorlabel102
   2178  f5b8		       34 00 00 00	      .byte.b	RED,0,0,0
   2179  f5bc		       34 00 00 00	      .byte.b	RED,0,0,0
   2180  f5c0		       34 00 00 00	      .byte.b	RED,0,0,0
   2181  f5c4		       34 00 00 00	      .byte.b	RED,0,0,0
   2182  f5c8		       34 00 00 00	      .byte.b	RED,0,0,0
   2183  f5cc		       34 00 00 00	      .byte.b	RED,0,0,0
   2184  f5d0		       08 00 00 00	      .byte.b	GRAY_LIGHT,0,0,0
   2185  f5d4		       08 00 00 00	      .byte.b	GRAY_LIGHT,0,0,0
   2186  f5d8		       04 00 00 00	      .byte.b	GRAY,0,0,0
   2187  f5dc		       04 00 00 00	      .byte.b	GRAY,0,0,0
   2188  f5e0				  -	      if	(<*) > (<(*+4))
   2189  f5e0				  -	      repeat	($100-<*)
   2190  f5e0				  -	      .byte	0
   2191  f5e0				  -	      repend
   2192  f5e0					      endif
   2193  f5e0				   playercolorL040_1
   2194  f5e0		       7a		      .byte.b	BLUE
   2195  f5e1		       7a		      .byte.b	BLUE
   2196  f5e2		       7a		      .byte.b	BLUE
   2197  f5e3		       7a		      .byte.b	BLUE
   2198  f5e4		       ae		      .byte.b	BLUE_LIGHT
   2199  f5e5				  -	      if	(<*) > (<(*+7))
   2200  f5e5				  -	      repeat	($100-<*)
   2201  f5e5				  -	      .byte	0
   2202  f5e5				  -	      repend
   2203  f5e5					      endif
   2204  f5e5				   playercolorL041_0
   2205  f5e5		       ae		      .byte.b	BLUE_LIGHT
   2206  f5e6		       7a		      .byte.b	BLUE
   2207  f5e7		       7a		      .byte.b	BLUE
   2208  f5e8		       7a		      .byte.b	BLUE
   2209  f5e9		       7a		      .byte.b	BLUE
   2210  f5ea		       ec		      .byte.b	TAN
   2211  f5eb		       ec		      .byte.b	TAN
   2212  f5ec		       ae		      .byte.b	BLUE_LIGHT
   2213  f5ed					      if	ECHOFIRST
      2479 bytes of ROM space left
   2214  f5ed					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   2215  f5ed					      endif
   2216  f5ed		       00 01	   ECHOFIRST  =	1
   2217  f5ed
   2218  f5ed
   2219  f5ed
   2220  f5ed							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2221  f5ed
   2222  f5ed							; feel free to modify the score graphics - just keep each digit 8 high
   2223  f5ed							; and keep the conditional compilation stuff intact
   2224  f5ed				  -	      ifconst	ROM2k
   2225  f5ed				  -	      ORG	$F7AC-8
   2226  f5ed					      else
   2227  f5ed				  -	      ifconst	bankswitch
   2228  f5ed				  -	      if	bankswitch == 8
   2229  f5ed				  -	      ORG	$2F94-bscode_length
   2230  f5ed				  -	      RORG	$FF94-bscode_length
   2231  f5ed				  -	      endif
   2232  f5ed				  -	      if	bankswitch == 16
   2233  f5ed				  -	      ORG	$4F94-bscode_length
   2234  f5ed				  -	      RORG	$FF94-bscode_length
   2235  f5ed				  -	      endif
   2236  f5ed				  -	      if	bankswitch == 32
   2237  f5ed				  -	      ORG	$8F94-bscode_length
   2238  f5ed				  -	      RORG	$FF94-bscode_length
   2239  f5ed				  -	      endif
   2240  f5ed				  -	      if	bankswitch == 64
   2241  f5ed				  -	      ORG	$10F80-bscode_length
   2242  f5ed				  -	      RORG	$1FF80-bscode_length
   2243  f5ed				  -	      endif
   2244  f5ed					      else
   2245  ff9c					      ORG	$FF9C
   2246  ff9c					      endif
   2247  ff9c					      endif
   2248  ff9c
   2249  ff9c							; font equates
   2250  ff9c		       00 01	   .21stcentury =	1
   2251  ff9c		       00 02	   alarmclock =	2
   2252  ff9c		       00 03	   handwritten =	3
   2253  ff9c		       00 04	   interrupted =	4
   2254  ff9c		       00 05	   retroputer =	5
   2255  ff9c		       00 06	   whimsey    =	6
   2256  ff9c		       00 07	   tiny       =	7
   2257  ff9c		       00 08	   hex	      =	8
   2258  ff9c
   2259  ff9c				  -	      ifconst	font
   2260  ff9c				  -	      if	font == hex
   2261  ff9c				  -	      ORG	. - 48
   2262  ff9c				  -	      endif
   2263  ff9c					      endif
   2264  ff9c
   2265  ff9c				   scoretable
   2266  ff9c
   2267  ff9c				  -	      ifconst	font
   2268  ff9c				  -	      if	font == .21stcentury
   2269  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   2270  ff9c				  -	      endif
   2271  ff9c				  -	      if	font == alarmclock
   2272  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   2273  ff9c				  -	      endif
   2274  ff9c				  -	      if	font == handwritten
   2275  ff9c				  -	      include	"score_graphics.asm.handwritten"
   2276  ff9c				  -	      endif
   2277  ff9c				  -	      if	font == interrupted
   2278  ff9c				  -	      include	"score_graphics.asm.interrupted"
   2279  ff9c				  -	      endif
   2280  ff9c				  -	      if	font == retroputer
   2281  ff9c				  -	      include	"score_graphics.asm.retroputer"
   2282  ff9c				  -	      endif
   2283  ff9c				  -	      if	font == whimsey
   2284  ff9c				  -	      include	"score_graphics.asm.whimsey"
   2285  ff9c				  -	      endif
   2286  ff9c				  -	      if	font == tiny
   2287  ff9c				  -	      include	"score_graphics.asm.tiny"
   2288  ff9c				  -	      endif
   2289  ff9c				  -	      if	font == hex
   2290  ff9c				  -	      include	"score_graphics.asm.hex"
   2291  ff9c				  -	      endif
   2292  ff9c					      else		; default font
   2293  ff9c
   2294  ff9c		       3c		      .byte.b	%00111100
   2295  ff9d		       66		      .byte.b	%01100110
   2296  ff9e		       66		      .byte.b	%01100110
   2297  ff9f		       66		      .byte.b	%01100110
   2298  ffa0		       66		      .byte.b	%01100110
   2299  ffa1		       66		      .byte.b	%01100110
   2300  ffa2		       66		      .byte.b	%01100110
   2301  ffa3		       3c		      .byte.b	%00111100
   2302  ffa4
   2303  ffa4		       7e		      .byte.b	%01111110
   2304  ffa5		       18		      .byte.b	%00011000
   2305  ffa6		       18		      .byte.b	%00011000
   2306  ffa7		       18		      .byte.b	%00011000
   2307  ffa8		       18		      .byte.b	%00011000
   2308  ffa9		       38		      .byte.b	%00111000
   2309  ffaa		       18		      .byte.b	%00011000
   2310  ffab		       08		      .byte.b	%00001000
   2311  ffac
   2312  ffac		       7e		      .byte.b	%01111110
   2313  ffad		       60		      .byte.b	%01100000
   2314  ffae		       60		      .byte.b	%01100000
   2315  ffaf		       3c		      .byte.b	%00111100
   2316  ffb0		       06		      .byte.b	%00000110
   2317  ffb1		       06		      .byte.b	%00000110
   2318  ffb2		       46		      .byte.b	%01000110
   2319  ffb3		       3c		      .byte.b	%00111100
   2320  ffb4
   2321  ffb4		       3c		      .byte.b	%00111100
   2322  ffb5		       46		      .byte.b	%01000110
   2323  ffb6		       06		      .byte.b	%00000110
   2324  ffb7		       06		      .byte.b	%00000110
   2325  ffb8		       1c		      .byte.b	%00011100
   2326  ffb9		       06		      .byte.b	%00000110
   2327  ffba		       46		      .byte.b	%01000110
   2328  ffbb		       3c		      .byte.b	%00111100
   2329  ffbc
   2330  ffbc		       0c		      .byte.b	%00001100
   2331  ffbd		       0c		      .byte.b	%00001100
   2332  ffbe		       7e		      .byte.b	%01111110
   2333  ffbf		       4c		      .byte.b	%01001100
   2334  ffc0		       4c		      .byte.b	%01001100
   2335  ffc1		       2c		      .byte.b	%00101100
   2336  ffc2		       1c		      .byte.b	%00011100
   2337  ffc3		       0c		      .byte.b	%00001100
   2338  ffc4
   2339  ffc4		       3c		      .byte.b	%00111100
   2340  ffc5		       46		      .byte.b	%01000110
   2341  ffc6		       06		      .byte.b	%00000110
   2342  ffc7		       06		      .byte.b	%00000110
   2343  ffc8		       3c		      .byte.b	%00111100
   2344  ffc9		       60		      .byte.b	%01100000
   2345  ffca		       60		      .byte.b	%01100000
   2346  ffcb		       7e		      .byte.b	%01111110
   2347  ffcc
   2348  ffcc		       3c		      .byte.b	%00111100
   2349  ffcd		       66		      .byte.b	%01100110
   2350  ffce		       66		      .byte.b	%01100110
   2351  ffcf		       66		      .byte.b	%01100110
   2352  ffd0		       7c		      .byte.b	%01111100
   2353  ffd1		       60		      .byte.b	%01100000
   2354  ffd2		       62		      .byte.b	%01100010
   2355  ffd3		       3c		      .byte.b	%00111100
   2356  ffd4
   2357  ffd4		       30		      .byte.b	%00110000
   2358  ffd5		       30		      .byte.b	%00110000
   2359  ffd6		       30		      .byte.b	%00110000
   2360  ffd7		       18		      .byte.b	%00011000
   2361  ffd8		       0c		      .byte.b	%00001100
   2362  ffd9		       06		      .byte.b	%00000110
   2363  ffda		       42		      .byte.b	%01000010
   2364  ffdb		       3e		      .byte.b	%00111110
   2365  ffdc
   2366  ffdc		       3c		      .byte.b	%00111100
   2367  ffdd		       66		      .byte.b	%01100110
   2368  ffde		       66		      .byte.b	%01100110
   2369  ffdf		       66		      .byte.b	%01100110
   2370  ffe0		       3c		      .byte.b	%00111100
   2371  ffe1		       66		      .byte.b	%01100110
   2372  ffe2		       66		      .byte.b	%01100110
   2373  ffe3		       3c		      .byte.b	%00111100
   2374  ffe4
   2375  ffe4		       3c		      .byte.b	%00111100
   2376  ffe5		       46		      .byte.b	%01000110
   2377  ffe6		       06		      .byte.b	%00000110
   2378  ffe7		       3e		      .byte.b	%00111110
   2379  ffe8		       66		      .byte.b	%01100110
   2380  ffe9		       66		      .byte.b	%01100110
   2381  ffea		       66		      .byte.b	%01100110
   2382  ffeb		       3c		      .byte.b	%00111100
   2383  ffec
   2384  ffec					      ifnconst	DPC_kernel_options
   2385  ffec
   2386  ffec		       00		      .byte.b	%00000000
   2387  ffed		       00		      .byte.b	%00000000
   2388  ffee		       00		      .byte.b	%00000000
   2389  ffef		       00		      .byte.b	%00000000
   2390  fff0		       00		      .byte.b	%00000000
   2391  fff1		       00		      .byte.b	%00000000
   2392  fff2		       00		      .byte.b	%00000000
   2393  fff3		       00		      .byte.b	%00000000
   2394  fff4
   2395  fff4					      endif
   2396  fff4
   2397  fff4					      endif
   2398  fff4
   2399  fff4				  -	      ifconst	ROM2k
   2400  fff4				  -	      ORG	$F7FC
   2401  fff4					      else
   2402  fff4				  -	      ifconst	bankswitch
   2403  fff4				  -	      if	bankswitch == 8
   2404  fff4				  -	      ORG	$2FF4-bscode_length
   2405  fff4				  -	      RORG	$FFF4-bscode_length
   2406  fff4				  -	      endif
   2407  fff4				  -	      if	bankswitch == 16
   2408  fff4				  -	      ORG	$4FF4-bscode_length
   2409  fff4				  -	      RORG	$FFF4-bscode_length
   2410  fff4				  -	      endif
   2411  fff4				  -	      if	bankswitch == 32
   2412  fff4				  -	      ORG	$8FF4-bscode_length
   2413  fff4				  -	      RORG	$FFF4-bscode_length
   2414  fff4				  -	      endif
   2415  fff4				  -	      if	bankswitch == 64
   2416  fff4				  -	      ORG	$10FE0-bscode_length
   2417  fff4				  -	      RORG	$1FFE0-bscode_length
   2418  fff4				  -	      endif
   2419  fff4					      else
   2420  fffc					      ORG	$FFFC
   2421  fffc					      endif
   2422  fffc					      endif
   2423  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2424  fffc
   2425  fffc				  -	      ifconst	bankswitch
   2426  fffc				  -	      if	bankswitch == 8
   2427  fffc				  -	      ORG	$2FFC
   2428  fffc				  -	      RORG	$FFFC
   2429  fffc				  -	      endif
   2430  fffc				  -	      if	bankswitch == 16
   2431  fffc				  -	      ORG	$4FFC
   2432  fffc				  -	      RORG	$FFFC
   2433  fffc				  -	      endif
   2434  fffc				  -	      if	bankswitch == 32
   2435  fffc				  -	      ORG	$8FFC
   2436  fffc				  -	      RORG	$FFFC
   2437  fffc				  -	      endif
   2438  fffc				  -	      if	bankswitch == 64
   2439  fffc				  -	      ORG	$10FF0
   2440  fffc				  -	      RORG	$1FFF0
   2441  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2442  fffc				  -	      ORG	$10FF8
   2443  fffc				  -	      RORG	$1FFF8
   2444  fffc				  -	      ifconst	superchip
   2445  fffc				  -	      .byte	"E","F","S","C"
   2446  fffc				  -	      else
   2447  fffc				  -	      .byte	"E","F","E","F"
   2448  fffc				  -	      endif
   2449  fffc				  -	      ORG	$10FFC
   2450  fffc				  -	      RORG	$1FFFC
   2451  fffc				  -	      endif
   2452  fffc					      else
   2453  fffc				  -	      ifconst	ROM2k
   2454  fffc				  -	      ORG	$F7FC
   2455  fffc					      else
   2456  fffc					      ORG	$FFFC
   2457  fffc					      endif
   2458  fffc					      endif
   2459  fffc		       00 f0		      .word.w	(start & $ffff)
   2460  fffe		       00 f0		      .word.w	(start & $ffff)
